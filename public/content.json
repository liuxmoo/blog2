{"meta":{"title":"for","subtitle":"Just go to do what you want to do.","description":"想成为一本书，一本能够被读懂的书！","author":"zihua","url":"http://foryung.com"},"pages":[{"title":"404","date":"2017-12-10T13:13:18.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"404.html","permalink":"http://foryung.com/404.html","excerpt":"","text":"&lt;!DOCTYPE html&gt;"},{"title":"关于我","date":"2017-08-23T15:23:59.000Z","updated":"2017-12-10T14:21:54.000Z","comments":true,"path":"about/index.html","permalink":"http://foryung.com/about/index.html","excerpt":"","text":"菜鸟一枚，但热爱docker。 会写Python，Go，Java。"},{"title":"blog","date":"2017-08-23T15:29:29.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"blog/index.html","permalink":"http://foryung.com/blog/index.html","excerpt":"","text":""}],"posts":[{"title":"Dockerfile","slug":"Dockerfile","date":"2017-12-10T13:22:05.000Z","updated":"2017-12-10T14:23:07.000Z","comments":true,"path":"2017/12/10/Dockerfile/","link":"","permalink":"http://foryung.com/2017/12/10/Dockerfile/","excerpt":"","text":"好久没写博客了，\b\b去七牛实习了一个月，\b写了快一个月的\bDockerfile,\b\b我个人是docker的脑残粉，现在的情况是，不管什么东西我都会想着\bdocker化，所以想结合自己这一段时间的使用\b做一次总结吧。 \b非Linux命令行 写Dockerfile命令时千万要记住，\b你在写dockerfile不是在写linux命令,所以一般我们\b在Dockerfile中建议把多条\b命令合在一起，这样防止最后生成的镜像过于庞大。 容器的本质 docker中的每一个容器的本质是Linux上的一个进程，所以不要把docker当做虚拟机使用 在容器中控制\b宿主机上的docker 之前在Daocloud实习，我一直非常困惑\bDCE(Daocloud的一款产品)是如何做到在容器中控制宿主机上的docker,\b一段时间的研究发现通过挂载 unix:///var/run/docker.sock 到容器中，就可以实现容器中控制宿主机上的docker","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://foryung.com/tags/docker/"}],"keywords":[]},{"title":"关于http,https流量转socks5流量的一些笔记","slug":"关于http-https流量转socks5流量的一些笔记","date":"2017-10-28T08:12:58.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/10/28/关于http-https流量转socks5流量的一些笔记/","link":"","permalink":"http://foryung.com/2017/10/28/关于http-https流量转socks5流量的一些笔记/","excerpt":"","text":"前言在linux（ubuntu）上使用过ssr的同学都知道，ssr使用的是socks5协议，并且在本地默认监听的是1080端口，我们需要在浏览器中使用 SwitchyOmega 插件才能正常FQ，那么问题来了，我们平时在命令行下使用wget，go get,mvn等走的都是http/https，所以我们是无法直接使用127.0.0.1:1080做代理的。怎么办？我们需要把http/https流量转发都1080端口即可 解决方案 安装polipo sudo apt-get install polipo 修改配置文件 sudo vim /etc/polipo/config #修改为如下 # This file only needs to list configuration variables that deviate # from the default values. See /usr/share/doc/polipo/examples/config.sample # and &quot;polipo -v&quot; for variables you can tweak and further information. logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &quot;127.0.0.1&quot; proxyPort = 8118 socksParentProxy = &quot;127.0.0.1:1080&quot; socksProxyType = socks5 重启 polipo sudo /etc/init.d/polipo restart 测试 export http_proxy=&quot;http://127.0.0.1:8118/&quot; curl ifconfig.me //稍等片刻可以看到终端显示代理服务器ip地址 完成上面步骤那么我们就可以通过 127.0.0.1:8118把http/https流量转发到127.0.0.1:1080端口的socks5上了 应用上面的记录主要是我在使用go get命令下载三方依赖的时候老是被xxxxx,那么完成了上面步骤，我就可以通过走8118端口用go get 下载到我需要的依赖了，我怎么做？看下面步骤…… 给go get 命令走socks5下载到我想要的东西 修改环境变量 vim .bashrc //在后面追加下面配置 alias goo=&apos;http_proxy=127.0.0.1:8118 https_proxy=127.0.0.1:8118 go&apos; //使.bashrc生效 source .bashrc 使用 goo get &lt;xxxxxxxxxx&gt; // 以上纯属个人笔记，难免有不当之处","categories":[],"tags":[{"name":"network","slug":"network","permalink":"http://foryung.com/tags/network/"}],"keywords":[]},{"title":"股市投资课程","slug":"股市投资课程","date":"2017-09-13T02:49:06.000Z","updated":"2017-12-10T14:13:24.000Z","comments":true,"path":"2017/09/13/股市投资课程/","link":"","permalink":"http://foryung.com/2017/09/13/股市投资课程/","excerpt":"","text":"考核 模拟炒股() 课程论文(姓名学号为用户名) 模拟炒股比赛 链接lab.10jqka.com.cn/login/index 公邮 yu56785678@126.com 密码 yu12345678 课程论文 yujiujiu999@126.com","categories":[],"tags":[{"name":"课程","slug":"课程","permalink":"http://foryung.com/tags/课程/"}],"keywords":[]},{"title":"fluent使用入门","slug":"fluent使用入门","date":"2017-09-04T02:23:32.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/09/04/fluent使用入门/","link":"","permalink":"http://foryung.com/2017/09/04/fluent使用入门/","excerpt":"","text":"docker 运行 docker run -d -p 9880:9880 -v /home/zihua/test:/fluentd/etc -e FLUENTD_CONF=fluentd.conf fluent/fluentd curl -X POST -d ‘json={“json”:”message”}’ http://localhost:9880/sample.test点击更多可以编辑7层负载均衡上两页中的 编辑不能修改7层负载均衡名称用到”更新Ingress” API添加 域名只能填一个路径也只能填一个选择器默认加载当前应用的第一个服务端口默认是80应用界面高级设置选择器和端口默认绿色字段为由选择器和端口默认创建的Server高级设置字段默认名字名称默认为:应用名_ingress 默认创建的Server 名字规则为 ingress名字-ingress-default-server值和Server名字相同 默认名字规则为：应用名-ingress-default-server应用名-镜像名 requirements = [‘wget’, ‘git’, ‘net-tools’, ‘bind-utils’, ‘iptables-services’, ‘bridge-utils’, ‘bash-completion’, ‘kexec-tools’, ‘sos’, ‘psacct’, ‘chrony’, ‘device-mapper-persistent-data’, ‘lvm2’, ‘audit’, ‘systemd-journal’, ‘socat’, ‘ipvsadm’]RUN yum install -y –setopt=obsoletes=0 wget git net-tools bind-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct ntp chrony device-mapper-persistent-data lvm2 audit systemd-journal socat yum-utils telnet tcpdump keepalived ipvsadm –downloadonly –downloaddir=/app/repo/packages requirements = [‘apt-transport-https’, ‘ca-certificates’, ‘lsb-release’, ‘software-properties-common’, ‘ntp’,’ipvsadm’]RUN apt-get update &amp;&amp; \\ apt-get install -y curl apt-transport-https ca-certificates lsb-release software-properties-common ntp keepalived ipvsadm","categories":[],"tags":[{"name":"fluent","slug":"fluent","permalink":"http://foryung.com/tags/fluent/"}],"keywords":[]},{"title":"docker远程调用笔记","slug":"docker远程调用笔记","date":"2017-08-31T13:58:12.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/31/docker远程调用笔记/","link":"","permalink":"http://foryung.com/2017/08/31/docker远程调用笔记/","excerpt":"","text":"实习这一段时间一直做的是有关docker方面的开发，公司代码测试非常困难","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://foryung.com/tags/docker/"}],"keywords":[]},{"title":"关于calico使用旧的configmap的解决方案","slug":"关于calico使用旧的configmap的解决方案","date":"2017-08-29T06:32:49.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/29/关于calico使用旧的configmap的解决方案/","link":"","permalink":"http://foryung.com/2017/08/29/关于calico使用旧的configmap的解决方案/","excerpt":"","text":"","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://foryung.com/tags/k8s/"}],"keywords":[]},{"title":"招新","slug":"招新","date":"2017-08-28T11:47:42.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/28/招新/","link":"","permalink":"http://foryung.com/2017/08/28/招新/","excerpt":"","text":"Let’s code 上海大学光伏蓝队招募指导老师: 朱文浩 （硕士生导师） 宗旨: 学习为主，吹牛为辅 技术方向: Java，Springboot开发 Vue.js 开发 Python 网络爬虫 Docker 等一切好玩的东西！ 加入要求: 热爱学习，善于学习发现新技术 热爱编程 责任心强，有一定的强迫症！ 面向对象： 上海大学大一升大二，大二升大三全体学生 详询： http://shucloud.shu.edu.cn/join_us Github主页： http://github.com/SHU-PV-Blue","categories":[],"tags":[{"name":"团队招新","slug":"团队招新","permalink":"http://foryung.com/tags/团队招新/"}],"keywords":[]},{"title":"ufw使用笔记","slug":"ufw使用笔记","date":"2017-08-26T13:13:08.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/26/ufw使用笔记/","link":"","permalink":"http://foryung.com/2017/08/26/ufw使用笔记/","excerpt":"","text":"最近在使用学校的云服务器，真心烦，各种端口限制，不过还好，在被限制的情况下逼迫自己学会使用nginx做反向代理，同时会用ufw。面是记录自己使用ufw的一些记录，防止自己忘掉。 安装ufw sudo apt-get install ufw 使用 sudo ufw status //查看开放的状态 sudo ufw allow 8000 //开放8000 sudo ufw deny 8000 //关闭 8000 ufw -h //具体查看使用帮助 590022","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://foryung.com/tags/linux/"}],"keywords":[]},{"title":"Ubuntu16.04 软件源","slug":"Ingress设计方案","date":"2017-08-24T08:06:37.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/24/Ingress设计方案/","link":"","permalink":"http://foryung.com/2017/08/24/Ingress设计方案/","excerpt":"","text":"之前一直用ubuntu14.04,那时安装软件基本没什么问题，但是到了ubuntu16.04各种问题都出现了，比如通过deb包安装搜狗输入法，docker等时依赖无法下载，经过一番折腾，发现是软件源不正常导致，所以想把这一折腾结构记录一下以免下次自己又得去折腾。 配置 sudo cp /etc/apt/source.list /etc/apt/backup_source.list 备份 vim /ete/apt/source.list 把原来的全删了，改为下面软件源 12345678910111213141516171819# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiversedeb http://cz.archive.ubuntu.com/ubuntu trusty main sudo apt update 更新一下即可","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://foryung.com/tags/Linux/"}],"keywords":[]},{"title":"实习心得","slug":"实习心得","date":"2017-08-23T15:55:52.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/23/实习心得/","link":"","permalink":"http://foryung.com/2017/08/23/实习心得/","excerpt":"","text":"了解了解阿斯顿发链接案例四大家垃圾上单；发","categories":[],"tags":[{"name":"实习","slug":"实习","permalink":"http://foryung.com/tags/实习/"}],"keywords":[]},{"title":"Ingress_API","slug":"ingress_API","date":"2017-08-22T23:55:33.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/23/ingress_API/","link":"","permalink":"http://foryung.com/2017/08/23/ingress_API/","excerpt":"","text":"Ingresses API使用Ingress 写操作 创建 ingress API POST /apis/extensions/v1beta1/namespaces/{namespace}/ingresses 创建 ingress API 调用示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455请求：curl -X POST -H 'Content-Type: application/yaml' --data 'apiVersion: extensions/v1beta1kind: Ingressmetadata: name: test2 namespace: kube-systemspec: rules: - host: www.for.com http: paths: - backend: serviceName: kubernetes-dashboard servicePort: 19090 path: /fooo12' http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses返回：&#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"ebc3e999-87d7-11e7-9381-0242ac130006\", \"resourceVersion\": \"135888\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T07:51:50Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.foryung.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123;&#125; &#125;&#125; 更新已有 ingress的局部信息 API PATCH /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 更新已有 ingress的局部信息 API 调用示例(把host改为 www.for.com) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172 请求： curl --request PATCH -H 'Content-Type: application/strategic-merge-patch+json' --data ' &#123; \"metadata\": &#123; \"name\":\"test2\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/foooasdf\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125; &#125; ' http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/default/ingresses/test2 返回： &#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"ebc3e999-87d7-11e7-9381-0242ac130006\", \"resourceVersion\": \"145533\", \"generation\": 4, \"creationTimestamp\": \"2017-08-23T07:51:50Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125;&#125; 替换 已有 ingress API PUT /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 替换 已有 ingress API 调用示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263请求：curl -X PUT -H 'Content-Type: application/yaml' --data 'apiVersion: extensions/v1beta1kind: Ingressmetadata: name: test namespace: kube-systemspec: rules: - host: www.forasdfdfasdf.com http: paths: - backend: serviceName: kubernetes-dashboard servicePort: 19090 path: /fooo' http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test返回：&#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"ebc3e999-87d7-11e7-9381-0242ac130006\", \"resourceVersion\": \"145714\", \"generation\": 5, \"creationTimestamp\": \"2017-08-23T07:51:50Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.forasdfdfasdf.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125;&#125; 删除某个已经存在的 ingress API DELETE /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 删除某个已经存在的 ingress API 调用示例 12345678910111213请求：curl -X DELETE http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test返回：&#123; \"kind\": \"Status\", \"apiVersion\": \"v1\", \"metadata\": &#123;&#125;, \"status\": \"Success\", \"code\": 200&#125; 批量删除 ingress API DELETE /apis/extensions/v1beta1/namespaces/{namespace}/ingresses 批量删除 ingress API 调用示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131请求：curl -X DELETE http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses返回：&#123; \"kind\": \"IngressList\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses\", \"resourceVersion\": \"147599\" &#125;, \"items\": [ &#123; \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"a7e900c0-87e9-11e7-9381-0242ac130006\", \"resourceVersion\": \"147347\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T09:58:47Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125;, &#123; \"metadata\": &#123; \"name\": \"test1\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test1\", \"uid\": \"b45329b4-87e9-11e7-9381-0242ac130006\", \"resourceVersion\": \"147395\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T09:59:08Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo1\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125;, &#123; \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"bedf2884-87e9-11e7-9381-0242ac130006\", \"resourceVersion\": \"147443\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T09:59:25Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; ]&#125; Ingress 读操作 获取某个Ingress 的详情数据 API GET /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 获取某个Ingress 的详情数据 API 调用示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445请求：curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2返回：&#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"21a8fb07-87eb-11e7-9381-0242ac130006\", \"resourceVersion\": \"148281\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T10:09:20Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; 获取所有 Ingress 的详细数据 API GET /apis/extensions/v1beta1/namespaces/{namespace}/ingresses 获取所有 Ingress 的详细数据 API 调用示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455请求：curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses返回： &#123; \"kind\": \"IngressList\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses\", \"resourceVersion\": \"148289\" &#125;, \"items\": [ &#123; \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"21a8fb07-87eb-11e7-9381-0242ac130006\", \"resourceVersion\": \"148281\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T10:09:20Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; ] &#125; 获取所namespace 下的所有 Ingress API GET /apis/extensions/v1beta1/ingresses 获取所namespace 下的所有 Ingress API 调用示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354请求：curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/ingresses返回：&#123; \"kind\": \"IngressList\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"selfLink\": \"/apis/extensions/v1beta1/ingresses\", \"resourceVersion\": \"261710\" &#125;, \"items\": [ &#123; \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"21a8fb07-87eb-11e7-9381-0242ac130006\", \"resourceVersion\": \"148281\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T10:09:20Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; ]&#125;","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://foryung.com/tags/k8s/"}],"keywords":[]},{"title":"Ingress Controller","slug":"ingress-controller","date":"2017-08-22T22:41:12.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/23/ingress-controller/","link":"","permalink":"http://foryung.com/2017/08/23/ingress-controller/","excerpt":"","text":"Ingress Controller 配置文件 curl get 请求 curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses curl post 请求 curl -X POST -H &apos;Content-Type: application/yaml&apos; --data &apos; apiVersion: extensions/v1beta1 kind: Ingress metadata: name: test namespace: kube-system spec: rules: - host: www.foryung.com http: paths: - backend: serviceName: kubernetes-dashboard servicePort: 19090 path: /fooo &apos; http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://foryung.com/tags/k8s/"}],"keywords":[]},{"title":"Hugo使用笔记","slug":"hugo使用笔记","date":"2017-08-17T07:12:44.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/17/hugo使用笔记/","link":"","permalink":"http://foryung.com/2017/08/17/hugo使用笔记/","excerpt":"","text":"hugo 使用笔记Go 安装 sudo apt-get install golangHugo deb包下载 下载地址","categories":[],"tags":[{"name":"hugo","slug":"hugo","permalink":"http://foryung.com/tags/hugo/"}],"keywords":[]},{"title":"nginx 使用笔记","slug":"nginx","date":"2017-08-17T07:12:44.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/08/17/nginx/","link":"","permalink":"http://foryung.com/2017/08/17/nginx/","excerpt":"","text":"nginx 使用笔记安装 (ubuntu) sudo apt-get update sudo apt-get install nginx 卸载 sudo apt-get remove nginx nginx-common # 卸载删除除了配置文件以外的所有文件。 sudo apt-get purge nginx nginx-common # 卸载所有东东，包括删除配置文件。 sudo apt-get autoremove # 在上面命令结束后执行，主要是卸载删除Nginx的不再被使用的依赖包。 sudo apt-get remove nginx-full nginx-common #卸载删除两个主要的包。 参考博文 启动 sudo /etc/init.d/nginx start 停止 ps -ef | grep nginx kill -QUIT pid kill -TERM pid pkill -9 nginx 重启 （必须实在启动情况下） nginx -s reload 检查修改后的配置文件 nginx -t -c /xxx/nginx/config/nginx.conf","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://foryung.com/tags/nginx/"}],"keywords":[]},{"title":"光伏项目_会议室系统进度","slug":"光伏项目进度","date":"2017-07-24T12:46:59.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/07/24/光伏项目进度/","link":"","permalink":"http://foryung.com/2017/07/24/光伏项目进度/","excerpt":"","text":"会议室系统（负责人：罗成盛）已完成 完成系统所有界面设计，身份验证，会议室查询，个人信息显示，会议室借用历史 需要继续完善 管理员界面所需要的一些数据接口，以及前端界面设计 原有房间数据表中管理单位与现有机构数据不一致 个人身份数据还有乱码存在． 房间使用信息表格的设计未完成 详情页面 http://182.254.246.75:8080 光伏项目后端(负责人 : 袁子华)完成情况 (70%) 完成用户权限管理设计 完成管理员操作的所有逻辑的设计，包括系统用户的增删改查（后期可能还会修改） 完成普通用户添加电站，修改电站基本配置 完成用户电站加入逆变器功能设计 完成电站气最新象数据接口设计 完成逆变器故障数据接口设计待完成 实时更新电站发电量api接口 故障发生即时提醒用户以及发送邮件通知用户api 日报表，月报表，季度报表，年报表api设计 详情页面 http://115.159.1.240:13145/swagger-ui.html#/ 光伏电站前端（负责人：方学长）完成情况（10%) 重构中 总体情况 由于前端人手不够以及部分队员做事不积极，我另找了一个女生来帮忙写前端． 会议室系统核心功能未能按时完成 光伏电站后端部分功能还存在bug 光伏前端进度太慢","categories":[],"tags":[{"name":"光伏项目","slug":"光伏项目","permalink":"http://foryung.com/tags/光伏项目/"}],"keywords":[]},{"title":"daocloud实习笔记","slug":"daocloud实习笔记","date":"2017-07-05T14:39:56.000Z","updated":"2017-12-10T16:20:39.000Z","comments":true,"path":"2017/07/05/daocloud实习笔记/","link":"","permalink":"http://foryung.com/2017/07/05/daocloud实习笔记/","excerpt":"","text":"第一天 熟悉daocloud 设计的产品 DCE 安装DCE * bash -c &quot;$(docker run --rm daocloud.io/daocloud/dce install)&quot; 卸载DCE * bash -c &quot;$(docker run --rm daocloud.io/daocloud/dce uninstall --force)&quot; 第二天部属DCE开发环境 克隆项目到本地（dce-controller,dce-deployer) 在环境变量添加如下配置 DOCKER_SELF_HOST_URL=tcp://192.168.100.177:12376 SWARM_URL=tcp://192.168.100.177:2375 PYTHONUNBUFFERED=1 ETCD_URL=etcd://192.168.100.177:12379 SSL_CERT_FILE=/home/zihua/DaoCloud/dce-deployer/certs/https/dce.crt SSL_PKEY_FILE=/home/zihua/DaoCloud/dce-deployer/certs/https/dce.key CLIENT_CERTIFICATION_PATH=/home/zihua/DaoCloud/dce-deployer/certs/client/client-cert.pem CLIENT_PRIVATE_KEY_PATH=/home/zihua/DaoCloud/dce-deployer/certs/client/client-key.pem CLIENT_CERTIFICATION_CA_PATH=/home/zihua/DaoCloud/dce-deployer/certs/client/ca.pem SSL_CERT_FILE=/home/zihua/DaoCloud/dce-deployer/certs/https/dce.crt 第三天学会重装，升级，DCE,并学会转DCE为各种模式，命令如下 docker run -i –rm daocloud.io/daocloud/dce:2.7.6-dev","categories":[],"tags":[{"name":"实习","slug":"实习","permalink":"http://foryung.com/tags/实习/"}],"keywords":[]},{"title":"docker使用笔记","slug":"docker使用笔记","date":"2017-06-29T13:06:05.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/06/29/docker使用笔记/","link":"","permalink":"http://foryung.com/2017/06/29/docker使用笔记/","excerpt":"","text":"安装docker curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet | sh - 非root用户使用docker sudo usermod -aG docker userName 重启电脑 在docker中部署mongodb docker run –name mongo3 -p 27018:27017 -d -v /home/yahaa/dockerdata:/data/db mongo –auth 解释： --name mongo3 指定容器名字为 mongo3 -p 27018:27017 指定本机端口27018和容器端口27018绑定 -d 在后台中运行 -v 把本地的 /home/yahaa/dockerdata挂载到 /data/db mongo 表示自动拉取的镜像 --auth 表示开启授权 docker exec -it mongo3 mongo admin 解释： 终端进入容器 mongo3 并且执行容器中的命令 mongo admin 然后创建一个user administrator: db.createUser({ user:&quot;zihua&quot;, pwd:&quot;Asd123321&quot;, roles:[{role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;} ]} ); db.createUser( { user: &quot;yahaa&quot;, pwd: &quot;Asd123321&quot;, roles: [ { role: &quot;readWrite&quot;, db: &quot;chatapi&quot; }, { role: &quot;readWrite&quot;, db: &quot;chatapi-log&quot; } ] } ) 详情参考下面博文docker 中mongodb 授权 参考博客 本地连接到阿里云mongodb//连接MongoDB并指定端口 mongo 192.168.1.100:27017 //连接到指定的MongoDB数据库 mongo 192.168.1.100:27017/test //指定用户名和密码连接到指定的MongoDB数据库 mongo 192.168.1.200:27017/test -u user -p password","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://foryung.com/tags/docker/"}],"keywords":[]},{"title":"mongodb使用总结","slug":"mongodb使用总结","date":"2017-06-25T16:37:08.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/06/26/mongodb使用总结/","link":"","permalink":"http://foryung.com/2017/06/26/mongodb使用总结/","excerpt":"","text":"Mongodb修改为密码登录 无密码登录到mongodb mongo 使用 admin这个数据库 use admin 新建用户 db.createUser( { user: &quot;userName&quot;, pwd: &quot;password&quot;, roles: [ { role: &quot;userAdmin&quot;, db: &quot;admin&quot; } ] } ) 停止 mongodb sudo service mongod stop 启动验证登录 sudo mongod --auth 重启 sudo service mongod start 密码登录到 mongodb mongo --port 27017 -u &quot;userName&quot; -p &quot;password&quot; --authenticationDatabase &quot;admin&quot; 说明 userName,password 为你想要添加的用户名以及密码，并且指定了数据库 admin ,拥有权限: userAdmin 数据库用户角色：read、readWrite; 数据库管理角色：dbAdmin、dbOwner、userAdmin； 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 备份恢复角色：backup、restore； 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 超级用户角色：root// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 内部角色：__system","categories":[],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://foryung.com/tags/mongodb/"}],"keywords":[]},{"title":"编译原理研讨","slug":"编译原理研讨","date":"2017-05-17T12:23:45.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/05/17/编译原理研讨/","link":"","permalink":"http://foryung.com/2017/05/17/编译原理研讨/","excerpt":"","text":"第二题设有文法 G[S’]; S’ -&gt; S S -&gt; aS S -&gt; bA A -&gt; dA A -&gt; d 构造G[S]的LR(0)项目规范族 C={I0,I1,…,In}。 说明G[S]属于哪一种LR文法，构造相应的LR分析表。 写出句子aabbd的分析过程。 解答过程 文法的项目 S’ -&gt; .S S’ -&gt; S. S -&gt; .aS S -&gt; a.S S -&gt; aS. S -&gt; .bA S -&gt; b.A S -&gt; bA. A -&gt; .dA A -&gt; d.A A -&gt; dA. S -&gt; .d S -&gt; d.","categories":[],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"http://foryung.com/tags/编译原理/"}],"keywords":[]},{"title":"体系结构期末笔记","slug":"体系结构期末笔记","date":"2017-05-17T06:14:46.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/05/17/体系结构期末笔记/","link":"","permalink":"http://foryung.com/2017/05/17/体系结构期末笔记/","excerpt":"","text":"","categories":[],"tags":[{"name":"系统结构","slug":"系统结构","permalink":"http://foryung.com/tags/系统结构/"}],"keywords":[]},{"title":"单机文件系统之Linux文件系统","slug":"单机文件系统之Linux文件系统","date":"2017-04-15T14:27:36.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/04/15/单机文件系统之Linux文件系统/","link":"","permalink":"http://foryung.com/2017/04/15/单机文件系统之Linux文件系统/","excerpt":"","text":"单机文件系统之Linux文件系统袁子华 14122260目录 引入 硬盘的组成回顾 分区的概念 Linux 文件系统 (VFS 虚拟文件系统) 基于Linux 虚拟文件系统的一些验证性实验 参考文献 引入 在安装多系统的情况下，为什么Linux 系统能够直接访问其他系统的文件？ ｕ盘在Linux 下被当作什么看待？ 如何有效的把云服务器的硬盘用起来？ 演示系统挂载设备操作 查看系统已挂载设备 sudo df -h 查看系统支持的文件系统 ls -l /lib/modules/$(uname -r)/kernel/fs 系统已经加载到内存的文件系统 cat /proc/filesystems 挂载设备 sudo mount /dev/xxx xxx目录 强制卸载设备 sudo umount /dev/xxx nfs文件系统配置脚本使用说明(服务器端 需要 root 权限) 代码地址 git clone git@github.com:yahaa/path_script.git cd path_script sudo su python nfs_service.py 停止服务 python nfs_umount.py nfs 客户端配置(需要 root 权限) git clone git@github.com:yahaa/path_script.git cd path_script sudo su python nfs_client.py 卸载 nfs python nfs_umount.py 硬盘的组成 磁盘由一个一个盘片组成如下图，图中灰色同心圆为磁道。 绿色部分为扇区，扇区是最小的存储单位，每个扇区为 512 bytes 。 图 1 将扇区组成一个圆，即构成柱面，柱面是分区的最小单位 名称 磁头（head） 磁道（track） 柱面（cylinder） 扇区（sector） 圆盘（platter）容量 存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数 例如 图2中磁盘是一个 3个圆盘6个磁头，7个柱面（每个盘片7个磁道） 的磁盘，图2中每条磁道有12个扇区，所以此磁盘的容量为 6712*512 字节。 图 ２ 分区 为什么要分区？ 一整块磁盘很大，就像一个没与分层的衣柜，所有衣服都仍在里面很乱 ． 把每个分区分开能一定程度确保数据安全 分区有助于系统性能提升 图 ３ 传统的分区方案，是将分区信息保存到磁盘的第一个扇区(MBR扇区)中的64个字节中，每个分区项占用16个字节，这16个字节中存有活动状态标志、文件系统标识、起止柱面号、磁头号、扇区号、隐含扇区数目(4个字节)、分区总扇区数目(4个字节)等内容。由于MBR扇区只有64个字节用于分区表，所以只能记录4个分区的信息。这就是硬盘主分区数目不能超过4个的原因。后来为了支持更多的分区，引入了扩展分区及逻辑分区的概念。但每个分区项仍用16个字节存储。 假设硬盘的设备名为 /dev/hda 那么在Linux 系统中设备文件如下： /dev/hda1 /dev/hda2 /dev/hda3 /dev/hda4 Linux 文件系统 “一切皆是文件” 是 Unix/Linux 的基本哲学之一．不仅普通的文件，目录、字符设备、块设备、 套接字等在 Unix/Linux 中都是以文件被对待；它们虽然类型不同，但是对其提供的却是同一套操作界面。 Linux 中允许众多不同的文件系统共存，如 ext2, ext3, vfat 等。通过使用同一套文件 I/O 系统 调用即可对 Linux 中的任意文件进行操作而无需考虑其所在的具体文件系统格式；更进一步，对文件的 操作可以跨文件系统而执行。 为了实现以上两点，Linux 引入虚拟文件系统（VFS),缩略图如图４ 图 4 VFS 思想 VFS 定义了所有文件系统都支持的基本的、概念上的接口和数据 结构；同时实际文件系统也提供 VFS 所期望的抽象接口和数据结构，与VFS的定义保持一致。(也就是说，一个文件系统要想被 Linux系统支持，那么该文件系统必须实现VFS所提供的接口) VFS 数据结构 (参考博客) 超级块(struct super_block {…} ) 超级块是记录整个文件系统相关信息的地方,没有超级块，也就没有文件系统的说法． inode结构( struct inode {…} ) 该结构中存储的是一个特定文件的一般信息，对于一个基于磁盘的文件系统，该结构对应磁盘上的”文件数据控制块”。每一个inode结构都对应一个inode节点号，这个节点号是唯一的，它也唯一标识一个文件系统中的文件。 dentry结构( struct dentry {…} ) 该结构存储的是目录实体和对应的文件的关联信息。 file结构( struct file {…} ) 该结构中存储的是一个打开的文件和打开这个文件的进程间的交互信息。该结构保存在kernel的内存区，在打开文件时被创建，关闭文件时被释放。 Linux 的Ｅxt2 文件系统(索引式文件系统) Ext2与分区示意图如图５ 图 5 详情对照 图 6 inode 结构图如图７ 图 7 Ext2 的相关说明 因为一个分区可能很大，可能会分成很多很多个block，为了便于管理，系统将这些block分成多个block组，每个block组中存储当前组的信息和当前block组的block ． inode中存储文件的一些属性信息，block中存储文件真正的内容，一个block的大小有1k、4k等大小，一个block中只能存储一个文件，比如现在有一个文件占据了一个block的1B大小，那么这个block剩余的大小也无法分配给其他文件使用。 Ext2 相关名称 super block 超级块，它记录的是整个文件系统的信息，文件系统的类型，inode数量，block数量等，每个分区的super block是相同的 文件系统描述 描述每个block group 的开始与结束的block号码。 块对应表(block bitmap) 用bit位记录了每一个block目前的状态，如果有数据就置为1，没有数据置为0。如果需要分配block，那么就找目前状态为0的。 inode 对应表(inode bitmap) 和块对应表相似，记录的是inode的分配和未分配的号码。 inode table 详细记录了每一个inode的信息。 data block 详细记录文件数据的地方，每一个block都有block号码。 FAT 文件系统 (详情参考操作系统教材) 大家都知道 u 盘使用的文件系统一般是FAT格式 链式索引 NFS 文件系统 NFS 是Ｎetwork File System 的缩写，其功能是通过网络，让不同的机器，不同的操作系统可以共享彼此的文件． 工作原理示意图 图 8 服务端配置 import os cmd = [&apos;apt-get update&apos;, &apos;apt-get install nfs-kernel-server nfs-common&apos;, &apos;mkdir /home/public&apos;, &apos;chmod -R 777 /home/public&apos;, &apos;echo &quot;/home/public *(rw,sync,no_root_squash)&quot; &gt;&gt;/etc/exports&apos; , &apos;service rpcbind start&apos;, &apos;service nfs-kernel-server start&apos;] def install(): for item in cmd: os.system(item) if __name__ == &apos;__main__&apos;: install() 客户端配置 import os cmd = [&apos;apt-get update&apos;, &apos;apt-get install rcpbind&apos;, &apos;apt-get install nfs-client&apos;, &apos;service rpcbind start&apos;, &apos;mkdir /home/nfsshare&apos;, &apos;mount -t nfs 115.29.146.79:/home/public /home/nfsshare&apos;, &apos;chmod -R 777 /home/nfsshare&apos;] def install(): for item in cmd: os.system(item) if __name__ == &apos;__main__&apos;: install() 卸载 NFS import os cmd = [&apos;umount 115.29.146.79:/home/public&apos;, &apos;service rpcbind stop&apos;, &apos;service nfs-kernel-server stop&apos;] def shudown(): for item in cmd: os.system(item) if __name__ == &apos;__main__&apos;: shudown() 参考文献 [1] 鸟哥.鸟哥的Linux私房菜基础篇.北京：人民邮电出版社，2017年３月:197-247. [２] 鸟哥.鸟哥的Linux私房菜服务篇.北京：人民邮电出版社，2017年３月:393-420. [3] Michael Beck,Harald Bohme.Linux内核编程指南．北京：清华大学出版社，2005年７月：108-135.","categories":[],"tags":[{"name":"系统结构","slug":"系统结构","permalink":"http://foryung.com/tags/系统结构/"}],"keywords":[]},{"title":"编译原理实验二","slug":"编译原理实验二","date":"2017-04-13T04:25:01.000Z","updated":"2017-08-13T04:25:01.000Z","comments":true,"path":"2017/04/13/编译原理实验二/","link":"","permalink":"http://foryung.com/2017/04/13/编译原理实验二/","excerpt":"","text":"实验二词法分析（小组验收）实验目的 根据 PL/0 语言的文法规范,编写 PL/0 语言的词法分析程序。 通过设计调试词法分析程序,实现从源程序中分出各种单词的方法;加深对课堂教学的理解;提高词法分析方法的实践能力。 掌握从源程序文件中读取有效字符的方法和产生源程序的内部表示文件的法。 掌握词法分析的实现方法。 上机调试编出的词法分析程序。 实验时间 4学时 实验内容 输入 PL/0 语言程序,输出程序中各个单词符号(关键字、专用符号以及其它标记)。实验要求 确定编译中单词种类、使用的表格、标识符与关键字的区分方法等。 词法分析器读入 PL/0 语言源程序(文本文件),识别结果也以文本文件保存。 词法分析器的输出形式采用二元式序列,即:(单词种类, 单词的值) 源程序中字符不区分大小写,即:“a1”和“A1”是同一个标识符。 准备至少 5 组测试用例,每组测试用例包括:输入源程序文件和输出结果。 测试用例必须包含所有的基本字、运算符、界符、以及各种标识符和常数。对不合法单词进行分类考虑测试用例,特别是对一些运算符要充分考虑各种组合。 输入输出样例实验代码 help.h 代码链接 // // Created by 高松 on 2017/4/6. // #ifndef EX02_HELP_H #define EX02_HELP_H bool IsAlpha(char ch){ if((ch &gt;=&apos;a&apos;&amp;&amp;ch&lt;=&apos;z&apos;)||(ch&gt;=&apos;A&apos;&amp;&amp;ch&lt;=&apos;Z&apos;)){ return true; } return false; } bool IsDigit(char ch){ if( ch&gt;=&apos;0&apos;&amp;&amp;ch&lt;=&apos;9&apos;){ return true; } return false; } bool IsAlphOrNum(char ch){ if(IsAlpha(ch)){ return true; } if(IsDigit(ch)){ return true; } return false; } #endif //EX02_HELP_H main.cpp 代码链接 #include &lt;iostream&gt; using namespace std; #include &lt;cstring&gt; #include &lt;cstdio&gt; #include &lt;fstream&gt; #include &lt;string&gt; #include &lt;map&gt; #include &quot;help.h&quot; #define FILEPATH &quot;test.txt&quot; #define TOKENPATH &quot;Mapper.txt&quot; #define TABSIZE 10 char prog[80],token[10]; char ch; int syn,p,m = 0,n,row,sum = 0; char *rwtab[TABSIZE] = { &quot;begin&quot;,&quot;if&quot;,&quot;then&quot;,&quot;while&quot;,&quot;do&quot;,&quot;end&quot;,&quot;read&quot;,&quot;write&quot;,&quot;const&quot;,&quot;var&quot;, }; map&lt;int ,string&gt; Mapper; void scaner(){ for(n = 0;n&lt;8;n++){ token[n] = NULL; } ch = prog[p++]; while(ch == &apos; &apos;){ ch = prog[p]; p++; } if(IsAlpha(ch)){ m = 0; while(IsAlphOrNum(ch)){ token[m++] = ch; ch = prog[p++]; } token[m++] = 0; p--; syn = 10; for(n = 0;n&lt;TABSIZE;n++){ if(strcmp(token,rwtab[n])==0){ syn = n+31; break; } } } else if( IsDigit(ch)){ sum = 0; while(isdigit(ch)){ sum = sum*10 +ch-&apos;0&apos;; ch = prog[p++]; } p--; syn = 11; if(sum&gt;32767){ syn = -1; } }else switch(ch){ case &apos;&lt;&apos;: m = 0; token[m++] = ch; ch = prog[p++]; if(ch == &apos;&gt;&apos;){ syn = 21; token[m++] = ch; } else if(ch == &apos;=&apos;){ syn = 2;; token[m++] = ch; } else { syn = 23; p--; } break; case &apos;&gt;&apos;: m = 0; token[m++] = ch; ch = prog[p++]; if( ch == &apos;=&apos;){ syn = 24; token[m++] = ch; } else{ syn = 20; p--; } break; case &apos;:&apos;: m = 0;token[m++] = ch; ch = prog[p++]; if( ch ==&apos;=&apos;){ syn = 18; token[m++] = ch; } else{ syn = 17; p--; } break; case &apos;,&apos; : syn=19;token[0] = ch; break; case &apos;*&apos; : syn=13;token[0] = ch; break; case &apos;/&apos; : syn=14;token[0] = ch; break; case &apos;+&apos; : syn=15;token[0] = ch; break; case &apos;-&apos; : syn=16;token[0] = ch; break; case &apos;=&apos; : syn=25;token[0] = ch; break; case &apos;;&apos; : syn=26;token[0] = ch; break; case &apos;(&apos; : syn=27;token[0] = ch; break; case &apos;)&apos; : syn=28;token[0] = ch; break; case &apos;.&apos; : syn=0; token[0] = ch; break; default: syn = -1; break; } } int main() { Mapper.clear(); p = 0; row = 1; ifstream MapFile(TOKENPATH); string line; if(MapFile){ while(getline(MapFile,line)){ bool IsNum = false; int sum = 0; string token = &quot;&quot;; for(int i =0;i&lt;line.size();i++){ if( line[i] ==&apos; &apos;){ IsNum = true; continue; } if(IsNum == true ){ sum = sum*10+(char)line[i]-&apos;0&apos;; } else { token += line[i]; } } Mapper[sum] = token; } } Mapper[0] = &quot;peroid&quot;; // map&lt;int,string&gt;:: iterator it; // for(it = Mapper.begin();it!=Mapper.end();it++){ // cout&lt;&lt;it-&gt;first&lt;&lt;&quot;,&quot;&lt;&lt;it-&gt;second&lt;&lt;endl; // } // return 0 ; ifstream in(FILEPATH); if(in){ while(getline(in,line)){ char c[100]; strcpy(c,line.c_str()); for(int i = 0;i&lt;strlen(c);i++){ ch = line[i]; prog[p++] = ch; if(ch == &apos;.&apos;){ goto A; } } } } // for(int i = 0;i&lt;p;i++){ // cout&lt;&lt;prog[i]; // } // return 0; A: p = 0; do { scaner(); // cout&lt;&lt;&quot;syn = &quot;&lt;&lt;syn&lt;&lt;endl; switch(syn){ case 11: cout&lt;&lt;&quot;(&quot;&lt;&lt;Mapper[11]&lt;&lt;&quot; &quot;&lt;&lt;sum&lt;&lt;&quot;)&quot;&lt;&lt;endl;break; case -1: cout&lt;&lt;&quot; Error in row &quot;&lt;&lt;endl; default: cout&lt;&lt;&quot;(&quot;&lt;&lt;Mapper[syn]&lt;&lt;&quot; &quot;&lt;&lt;token&lt;&lt;&quot;)&quot;&lt;&lt;endl;break; } }while(syn!=0); return 0; } 测试样例样例1 题目给的样例 const a = 10; var b,c; begin read(b); c:=a+b; wrrite(c) end. 输出结果 (const const) (Identity a) (Equal =) (Digit 10) (semicolon ;) (var var) (Identity b) (comma ,) (Identity c) (semicolon ;) (Beginsys begin) (read read) (lparen () (Identity b) (rparen )) (semicolon ;) (Identity c) (becomes :=) (Identity a) (Plus +) (Identity b) (semicolon ;) (Identity wrrite) (lparen () (Identity c) (rparen )) (End end) (peroid .) 样例2 包含大写的样例 CONST a=10; VAR b,c; begin read(b); c:=a+b; wrrite(c) end. 输出结果 (Identity CONST) (Identity a) (Equal =) (Digit 10) (semicolon ;) (Identity VAR) (Identity b) (comma ,) (Identity c) (semicolon ;) (Beginsys begin) (read read) (lparen () (Identity b) (rparen )) (semicolon ;) (Identity c) (becomes :=) (Identity a) (Plus +) (Identity b) (semicolon ;) (Identity wrrite) (lparen () (Identity c) (rparen )) (End end) (peroid .) 样例3 拼写有错的样例 cons a = 10; var b,c; begin read(b); c:=a+b; wrrite(c) end. 输出结果 (Identity cons) (Identity a) (Equal =) (Digit 10) (semicolon ;) (var var) (Identity b) (comma ,) (Identity c) (semicolon ;) (Beginsys begin) (read read) (lparen () (Identity b) (rparen )) (semicolon ;) (Identity c) (becomes :=) (Identity a) (Plus +) (Identity b) (semicolon ;) (Identity wrrite) (lparen () (Identity c) (rparen )) (End end) (peroid .) 样例4 包含大于等于号的样例 const a = 10; var b,c; begin read(b); if(a&gt;=b) then c:=b+a; write(c); end. 输出结果 (const const) (Identity a) (Equal =) (Digit 10) (semicolon ;) (var var) (Identity b) (comma ,) (Identity c) (semicolon ;) (Beginsys begin) (read read) (lparen () (Identity b) (rparen )) (semicolon ;) (Ifsys if) (lparen () (Identity a) (EqualOrGreat &gt;=) (Identity b) (rparen )) (Thensys then) (Identity c) (becomes :=) (Identity b) (Plus +) (Identity a) (semicolon ;) (write write) (lparen () (Identity c) (rparen )) (semicolon ;) (End end) (peroid .) 样例5 包含空格回车的样例 const a = 10; var b, c; begin read(b); if(a&gt;=b) then c:=b+a; write(c); end. 输出结果 (const const) (Identity a) (Equal =) (Digit 10) (semicolon ;) (var var) (Identity b) (comma ,) (Identity c) (semicolon ;) (Beginsys begin) (read read) (lparen () (Identity b) (rparen )) (semicolon ;) (Ifsys if) (lparen () (Identity a) (EqualOrGreat &gt;=) (Identity b) (rparen )) (Thensys then) (Identity c) (becomes :=) (Identity b) (Plus +) (Identity a) (semicolon ;) (write write) (lparen () (Identity c) (rparen )) (semicolon ;) (End end) (peroid .)","categories":[{"name":"课程原理","slug":"课程原理","permalink":"http://foryung.com/categories/课程原理/"}],"tags":[{"name":"编译原理","slug":"编译原理","permalink":"http://foryung.com/tags/编译原理/"}],"keywords":[{"name":"课程原理","slug":"课程原理","permalink":"http://foryung.com/categories/课程原理/"}]},{"title":"英语学习小工具","slug":"google浏览器插件开发入门","date":"2017-03-22T15:22:55.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/03/22/google浏览器插件开发入门/","link":"","permalink":"http://foryung.com/2017/03/22/google浏览器插件开发入门/","excerpt":"","text":"英语学习小工具项目来源 平时自己在chrome使用划词翻译遇到了很多陌生的单词，但是每次都是翻译完就完了，没能及时地把自己遇到过生词记录下来。 如果能在每次使用翻译的时候把自己不会的单词默默地记录下来那么我们可以有针对性的复习自己不会的单词。 实现思路 在开源项目 划词翻译 的基础上做修改，把每次或多次翻译的单词或句子发送到配套服务器上。 服务器用负责收集单词","categories":[],"tags":[{"name":"chrome","slug":"chrome","permalink":"http://foryung.com/tags/chrome/"}],"keywords":[]},{"title":"Markdown语法入门","slug":"Markdown语法入门","date":"2017-03-18T13:57:54.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"2017/03/18/Markdown语法入门/","link":"","permalink":"http://foryung.com/2017/03/18/Markdown语法入门/","excerpt":"我久违的笔记写给自己很久前打算每天坚持写一些总结，日记用以记录自己的生活。 但是每次都被自己的懒惰给征服了，希望这次自己能坚持下去吧！","text":"我久违的笔记写给自己很久前打算每天坚持写一些总结，日记用以记录自己的生活。 但是每次都被自己的懒惰给征服了，希望这次自己能坚持下去吧！ markdown 练习一个人一个非常懒惰 的人 但是一个积极向上的人 懒惰不代表我不积极 如果有一天我再次遇见你，我绝对看都不看你一眼！ 假如世界欺骗了你，不要悲伤，不要难过，你默默的记住就是了！ 一个技术宅的世界 别人说你不行了，那不是 你真 的不行你自己说自己不行了那你就是永远的 不行 了 一个人要有目标是吧！ 目标 懒惰 废物 世界 和平 爱好 你好啊 我很好 好久不见啊 源代码 public class Singleton { public static void main(String []args){ System.out.println(&quot;Love Java&quot;); } }","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://foryung.com/tags/Markdown/"}],"keywords":[]}]}