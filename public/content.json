{"meta":{"title":"for","subtitle":"Just go to do what you want to do.","description":"想成为一本书，一本能够被读懂的书！","author":"zihua","url":"http://foryung.com"},"pages":[{"title":"404","date":"2017-12-10T13:13:18.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"404.html","permalink":"http://foryung.com/404.html","excerpt":"","text":"&lt;!DOCTYPE html&gt;"},{"title":"关于我","date":"2017-08-23T15:23:59.000Z","updated":"2017-12-10T14:21:54.000Z","comments":true,"path":"about/index.html","permalink":"http://foryung.com/about/index.html","excerpt":"","text":"菜鸟一枚，但热爱docker。 会写Python，Go，Java。"},{"title":"blog","date":"2017-08-23T15:29:29.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"blog/index.html","permalink":"http://foryung.com/blog/index.html","excerpt":"","text":""}],"posts":[{"title":"Dockerfile","slug":"Dockerfile","date":"2017-12-10T13:22:05.000Z","updated":"2018-01-05T10:40:06.000Z","comments":true,"path":"2017/12/10/Dockerfile/","link":"","permalink":"http://foryung.com/2017/12/10/Dockerfile/","excerpt":"","text":"好久没写博客了，\b\b去七牛实习了一个月，\b写了快一个月的\bDockerfile,\b\b我个人是docker的脑残粉，现在的情况是，不管什么东西我都会想着\bdocker化，所以想结合自己这一段时间的使用\b做一次总结吧。 \b非Linux命令行 写Dockerfile命令时千万要记住，\b你在写dockerfile不是在写linux命令,所以一般我们\b在Dockerfile中建议把多条\b命令合在一起，这样防止最后生成的镜像过于庞大。 容器的本质 docker中的每一个容器的本质是Linux上的一个进程，所以不要把docker当做虚拟机使用 在容器中控制\b宿主机上的docker 之前在Daocloud实习，我一直非常困惑\bDCE(Daocloud的一款产品)是如何做到在容器中控制宿主机上的docker,\b一段时间的研究发现通过挂载 unix:///var/run/docker.sock 到容器中，就可以实现容器中控制宿主机上的docker","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://foryung.com/tags/docker/"}],"keywords":[]},{"title":"关于http,https流量转socks5流量的一些笔记","slug":"关于http-https流量转socks5流量的一些笔记","date":"2017-10-28T08:12:58.000Z","updated":"2018-01-05T10:39:45.000Z","comments":true,"path":"2017/10/28/关于http-https流量转socks5流量的一些笔记/","link":"","permalink":"http://foryung.com/2017/10/28/关于http-https流量转socks5流量的一些笔记/","excerpt":"","text":"前言在linux（ubuntu）上使用过ssr的同学都知道，ssr使用的是socks5协议，并且在本地默认监听的是1080端口，我们需要在浏览器中使用 SwitchyOmega 插件才能正常FQ，那么问题来了，我们平时在命令行下使用wget，go get,mvn等走的都是http/https，所以我们是无法直接使用127.0.0.1:1080做代理的。怎么办？我们需要把http/https流量转发都1080端口即可 解决方案 安装polipo sudo apt-get install polipo 修改配置文件 sudo vim /etc/polipo/config #修改为如下 # This file only needs to list configuration variables that deviate # from the default values. See /usr/share/doc/polipo/examples/config.sample # and &quot;polipo -v&quot; for variables you can tweak and further information. logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &quot;127.0.0.1&quot; proxyPort = 8118 socksParentProxy = &quot;127.0.0.1:1080&quot; socksProxyType = socks5 重启 polipo sudo /etc/init.d/polipo restart 测试 export http_proxy=&quot;http://127.0.0.1:8118/&quot; curl ifconfig.me //稍等片刻可以看到终端显示代理服务器ip地址 完成上面步骤那么我们就可以通过 127.0.0.1:8118把http/https流量转发到127.0.0.1:1080端口的socks5上了 应用上面的记录主要是我在使用go get命令下载三方依赖的时候老是被xxxxx,那么完成了上面步骤，我就可以通过走8118端口用go get 下载到我需要的依赖了，我怎么做？看下面步骤…… 给go get 命令走socks5下载到我想要的东西 修改环境变量 vim .bashrc //在后面追加下面配置 alias goo=&apos;http_proxy=127.0.0.1:8118 https_proxy=127.0.0.1:8118 go&apos; //使.bashrc生效 source .bashrc 使用 goo get &lt;xxxxxxxxxx&gt; // 以上纯属个人笔记，难免有不当之处","categories":[],"tags":[{"name":"network","slug":"network","permalink":"http://foryung.com/tags/network/"}],"keywords":[]},{"title":"fluent使用入门","slug":"fluent使用入门","date":"2017-09-04T02:23:32.000Z","updated":"2018-01-05T10:36:18.000Z","comments":true,"path":"2017/09/04/fluent使用入门/","link":"","permalink":"http://foryung.com/2017/09/04/fluent使用入门/","excerpt":"","text":"docker 运行 docker run -d -p 9880:9880 -v /home/zihua/test:/fluentd/etc -e FLUENTD_CONF=fluentd.conf fluent/fluentd curl -X POST -d ‘json={“json”:”message”}’ http://localhost:9880/sample.test点击更多可以编辑7层负载均衡上两页中的 编辑不能修改7层负载均衡名称用到”更新Ingress” API添加 域名只能填一个路径也只能填一个选择器默认加载当前应用的第一个服务端口默认是80应用界面高级设置选择器和端口默认绿色字段为由选择器和端口默认创建的Server高级设置字段默认名字名称默认为:应用名_ingress 默认创建的Server 名字规则为 ingress名字-ingress-default-server值和Server名字相同 默认名字规则为：应用名-ingress-default-server应用名-镜像名 requirements = [‘wget’, ‘git’, ‘net-tools’, ‘bind-utils’, ‘iptables-services’, ‘bridge-utils’, ‘bash-completion’, ‘kexec-tools’, ‘sos’, ‘psacct’, ‘chrony’, ‘device-mapper-persistent-data’, ‘lvm2’, ‘audit’, ‘systemd-journal’, ‘socat’, ‘ipvsadm’]RUN yum install -y –setopt=obsoletes=0 wget git net-tools bind-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct ntp chrony device-mapper-persistent-data lvm2 audit systemd-journal socat yum-utils telnet tcpdump keepalived ipvsadm –downloadonly –downloaddir=/app/repo/packages requirements = [‘apt-transport-https’, ‘ca-certificates’, ‘lsb-release’, ‘software-properties-common’, ‘ntp’,’ipvsadm’]RUN apt-get update &amp;&amp; \\ apt-get install -y curl apt-transport-https ca-certificates lsb-release software-properties-common ntp keepalived ipvsadm","categories":[],"tags":[{"name":"fluent","slug":"fluent","permalink":"http://foryung.com/tags/fluent/"}],"keywords":[]},{"title":"docker远程调用笔记","slug":"docker远程调用笔记","date":"2017-08-31T13:58:12.000Z","updated":"2018-01-05T10:36:11.000Z","comments":true,"path":"2017/08/31/docker远程调用笔记/","link":"","permalink":"http://foryung.com/2017/08/31/docker远程调用笔记/","excerpt":"","text":"实习这一段时间一直做的是有关docker方面的开发，公司代码测试非常困难","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://foryung.com/tags/docker/"}],"keywords":[]},{"title":"ufw使用笔记","slug":"ufw使用笔记","date":"2017-08-26T13:13:08.000Z","updated":"2018-01-05T10:38:08.000Z","comments":true,"path":"2017/08/26/ufw使用笔记/","link":"","permalink":"http://foryung.com/2017/08/26/ufw使用笔记/","excerpt":"","text":"最近在使用学校的云服务器，真心烦，各种端口限制，不过还好，在被限制的情况下逼迫自己学会使用nginx做反向代理，同时会用ufw。面是记录自己使用ufw的一些记录，防止自己忘掉。 安装ufw sudo apt-get install ufw 使用 sudo ufw status //查看开放的状态 sudo ufw allow 8000 //开放8000 sudo ufw deny 8000 //关闭 8000 ufw -h //具体查看使用帮助 590022","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://foryung.com/tags/linux/"}],"keywords":[]},{"title":"Ubuntu16.04 软件源","slug":"Ubuntu软件源","date":"2017-08-24T08:06:37.000Z","updated":"2018-01-05T10:39:49.000Z","comments":true,"path":"2017/08/24/Ubuntu软件源/","link":"","permalink":"http://foryung.com/2017/08/24/Ubuntu软件源/","excerpt":"","text":"之前一直用ubuntu14.04,那时安装软件基本没什么问题，但是到了ubuntu16.04各种问题都出现了，比如通过deb包安装搜狗输入法，docker等时依赖无法下载，经过一番折腾，发现是软件源不正常导致，所以想把这一折腾结构记录一下以免下次自己又得去折腾。 配置 sudo cp /etc/apt/source.list /etc/apt/backup_source.list 备份 vim /ete/apt/source.list 把原来的全删了，改为下面软件源 12345678910111213141516171819# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiversedeb http://cz.archive.ubuntu.com/ubuntu trusty main sudo apt update 更新一下即可","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://foryung.com/tags/Linux/"}],"keywords":[]},{"title":"Ingress_API","slug":"ingress_API","date":"2017-08-22T23:55:33.000Z","updated":"2018-01-05T10:36:38.000Z","comments":true,"path":"2017/08/23/ingress_API/","link":"","permalink":"http://foryung.com/2017/08/23/ingress_API/","excerpt":"","text":"Ingresses API使用Ingress 写操作 创建 ingress API POST /apis/extensions/v1beta1/namespaces/{namespace}/ingresses 创建 ingress API 调用示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455请求：curl -X POST -H 'Content-Type: application/yaml' --data 'apiVersion: extensions/v1beta1kind: Ingressmetadata: name: test2 namespace: kube-systemspec: rules: - host: www.for.com http: paths: - backend: serviceName: kubernetes-dashboard servicePort: 19090 path: /fooo12' http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses返回：&#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"ebc3e999-87d7-11e7-9381-0242ac130006\", \"resourceVersion\": \"135888\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T07:51:50Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.foryung.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123;&#125; &#125;&#125; 更新已有 ingress的局部信息 API PATCH /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 更新已有 ingress的局部信息 API 调用示例(把host改为 www.for.com) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172 请求： curl --request PATCH -H 'Content-Type: application/strategic-merge-patch+json' --data ' &#123; \"metadata\": &#123; \"name\":\"test2\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/foooasdf\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125; &#125; ' http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/default/ingresses/test2 返回： &#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"ebc3e999-87d7-11e7-9381-0242ac130006\", \"resourceVersion\": \"145533\", \"generation\": 4, \"creationTimestamp\": \"2017-08-23T07:51:50Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125;&#125; 替换 已有 ingress API PUT /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 替换 已有 ingress API 调用示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263请求：curl -X PUT -H 'Content-Type: application/yaml' --data 'apiVersion: extensions/v1beta1kind: Ingressmetadata: name: test namespace: kube-systemspec: rules: - host: www.forasdfdfasdf.com http: paths: - backend: serviceName: kubernetes-dashboard servicePort: 19090 path: /fooo' http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test返回：&#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"ebc3e999-87d7-11e7-9381-0242ac130006\", \"resourceVersion\": \"145714\", \"generation\": 5, \"creationTimestamp\": \"2017-08-23T07:51:50Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.forasdfdfasdf.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125;&#125; 删除某个已经存在的 ingress API DELETE /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 删除某个已经存在的 ingress API 调用示例 12345678910111213请求：curl -X DELETE http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test返回：&#123; \"kind\": \"Status\", \"apiVersion\": \"v1\", \"metadata\": &#123;&#125;, \"status\": \"Success\", \"code\": 200&#125; 批量删除 ingress API DELETE /apis/extensions/v1beta1/namespaces/{namespace}/ingresses 批量删除 ingress API 调用示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131请求：curl -X DELETE http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses返回：&#123; \"kind\": \"IngressList\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses\", \"resourceVersion\": \"147599\" &#125;, \"items\": [ &#123; \"metadata\": &#123; \"name\": \"test\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test\", \"uid\": \"a7e900c0-87e9-11e7-9381-0242ac130006\", \"resourceVersion\": \"147347\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T09:58:47Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125;, &#123; \"metadata\": &#123; \"name\": \"test1\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test1\", \"uid\": \"b45329b4-87e9-11e7-9381-0242ac130006\", \"resourceVersion\": \"147395\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T09:59:08Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo1\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125;, &#123; \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"bedf2884-87e9-11e7-9381-0242ac130006\", \"resourceVersion\": \"147443\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T09:59:25Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; ]&#125; Ingress 读操作 获取某个Ingress 的详情数据 API GET /apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name} 获取某个Ingress 的详情数据 API 调用示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445请求：curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2返回：&#123; \"kind\": \"Ingress\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"21a8fb07-87eb-11e7-9381-0242ac130006\", \"resourceVersion\": \"148281\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T10:09:20Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; 获取所有 Ingress 的详细数据 API GET /apis/extensions/v1beta1/namespaces/{namespace}/ingresses 获取所有 Ingress 的详细数据 API 调用示例 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455请求：curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses返回： &#123; \"kind\": \"IngressList\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses\", \"resourceVersion\": \"148289\" &#125;, \"items\": [ &#123; \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"21a8fb07-87eb-11e7-9381-0242ac130006\", \"resourceVersion\": \"148281\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T10:09:20Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; ] &#125; 获取所namespace 下的所有 Ingress API GET /apis/extensions/v1beta1/ingresses 获取所namespace 下的所有 Ingress API 调用示例 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354请求：curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/ingresses返回：&#123; \"kind\": \"IngressList\", \"apiVersion\": \"extensions/v1beta1\", \"metadata\": &#123; \"selfLink\": \"/apis/extensions/v1beta1/ingresses\", \"resourceVersion\": \"261710\" &#125;, \"items\": [ &#123; \"metadata\": &#123; \"name\": \"test2\", \"namespace\": \"kube-system\", \"selfLink\": \"/apis/extensions/v1beta1/namespaces/kube-system/ingresses/test2\", \"uid\": \"21a8fb07-87eb-11e7-9381-0242ac130006\", \"resourceVersion\": \"148281\", \"generation\": 1, \"creationTimestamp\": \"2017-08-23T10:09:20Z\" &#125;, \"spec\": &#123; \"rules\": [ &#123; \"host\": \"www.for.com\", \"http\": &#123; \"paths\": [ &#123; \"path\": \"/fooo12\", \"backend\": &#123; \"serviceName\": \"kubernetes-dashboard\", \"servicePort\": 19090 &#125; &#125; ] &#125; &#125; ] &#125;, \"status\": &#123; \"loadBalancer\": &#123; \"ingress\": [ &#123; \"ip\": \"192.168.2.80\" &#125; ] &#125; &#125; &#125; ]&#125;","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://foryung.com/tags/k8s/"}],"keywords":[]},{"title":"Ingress Controller","slug":"ingress-controller","date":"2017-08-22T22:41:12.000Z","updated":"2018-01-05T10:37:04.000Z","comments":true,"path":"2017/08/23/ingress-controller/","link":"","permalink":"http://foryung.com/2017/08/23/ingress-controller/","excerpt":"","text":"Ingress Controller 配置文件 curl get 请求 curl -X GET http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses curl post 请求 curl -X POST -H &apos;Content-Type: application/yaml&apos; --data &apos; apiVersion: extensions/v1beta1 kind: Ingress metadata: name: test namespace: kube-system spec: rules: - host: www.foryung.com http: paths: - backend: serviceName: kubernetes-dashboard servicePort: 19090 path: /fooo &apos; http://127.0.0.1:18081/apis/extensions/v1beta1/namespaces/kube-system/ingresses","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://foryung.com/tags/k8s/"}],"keywords":[]},{"title":"nginx 使用笔记","slug":"nginx","date":"2017-08-17T07:12:44.000Z","updated":"2018-01-05T10:39:53.000Z","comments":true,"path":"2017/08/17/nginx/","link":"","permalink":"http://foryung.com/2017/08/17/nginx/","excerpt":"","text":"nginx 使用笔记安装 (ubuntu) sudo apt-get update sudo apt-get install nginx 卸载 sudo apt-get remove nginx nginx-common # 卸载删除除了配置文件以外的所有文件。 sudo apt-get purge nginx nginx-common # 卸载所有东东，包括删除配置文件。 sudo apt-get autoremove # 在上面命令结束后执行，主要是卸载删除Nginx的不再被使用的依赖包。 sudo apt-get remove nginx-full nginx-common #卸载删除两个主要的包。 参考博文 启动 sudo /etc/init.d/nginx start 停止 ps -ef | grep nginx kill -QUIT pid kill -TERM pid pkill -9 nginx 重启 （必须实在启动情况下） nginx -s reload 检查修改后的配置文件 nginx -t -c /xxx/nginx/config/nginx.conf","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://foryung.com/tags/nginx/"}],"keywords":[]},{"title":"Hugo使用笔记","slug":"hugo使用笔记","date":"2017-08-17T07:12:44.000Z","updated":"2018-01-05T10:36:31.000Z","comments":true,"path":"2017/08/17/hugo使用笔记/","link":"","permalink":"http://foryung.com/2017/08/17/hugo使用笔记/","excerpt":"","text":"hugo 使用笔记Go 安装 sudo apt-get install golangHugo deb包下载 下载地址","categories":[],"tags":[{"name":"hugo","slug":"hugo","permalink":"http://foryung.com/tags/hugo/"}],"keywords":[]},{"title":"daocloud实习笔记","slug":"daocloud实习笔记","date":"2017-07-05T14:39:56.000Z","updated":"2018-01-05T10:34:23.000Z","comments":true,"path":"2017/07/05/daocloud实习笔记/","link":"","permalink":"http://foryung.com/2017/07/05/daocloud实习笔记/","excerpt":"","text":"第一天 熟悉daocloud 设计的产品 DCE 安装DCE * bash -c &quot;$(docker run --rm daocloud.io/daocloud/dce install)&quot; 卸载DCE * bash -c &quot;$(docker run --rm daocloud.io/daocloud/dce uninstall --force)&quot; 第二天部属DCE开发环境 克隆项目到本地（dce-controller,dce-deployer) 在环境变量添加如下配置 DOCKER_SELF_HOST_URL=tcp://192.168.100.177:12376 SWARM_URL=tcp://192.168.100.177:2375 PYTHONUNBUFFERED=1 ETCD_URL=etcd://192.168.100.177:12379 SSL_CERT_FILE=/home/zihua/DaoCloud/dce-deployer/certs/https/dce.crt SSL_PKEY_FILE=/home/zihua/DaoCloud/dce-deployer/certs/https/dce.key CLIENT_CERTIFICATION_PATH=/home/zihua/DaoCloud/dce-deployer/certs/client/client-cert.pem CLIENT_PRIVATE_KEY_PATH=/home/zihua/DaoCloud/dce-deployer/certs/client/client-key.pem CLIENT_CERTIFICATION_CA_PATH=/home/zihua/DaoCloud/dce-deployer/certs/client/ca.pem SSL_CERT_FILE=/home/zihua/DaoCloud/dce-deployer/certs/https/dce.crt 第三天学会重装，升级，DCE,并学会转DCE为各种模式，命令如下 docker run -i –rm daocloud.io/daocloud/dce:2.7.6-dev","categories":[],"tags":[{"name":"实习","slug":"实习","permalink":"http://foryung.com/tags/实习/"}],"keywords":[]},{"title":"docker使用笔记","slug":"docker使用笔记","date":"2017-06-29T13:06:05.000Z","updated":"2018-01-05T10:46:51.000Z","comments":true,"path":"2017/06/29/docker使用笔记/","link":"","permalink":"http://foryung.com/2017/06/29/docker使用笔记/","excerpt":"","text":"安装docker curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet | sh - 非root用户使用docker sudo usermod -aG docker userName 重启电脑 在docker中部署mongodb docker run –name mongo3 -p 27018:27017 -d -v /home/yahaa/dockerdata:/data/db mongo –auth 解释： --name mongo3 指定容器名字为 mongo3 -p 27018:27017 指定本机端口27018和容器端口27018绑定 -d 在后台中运行 -v 把本地的 /home/yahaa/dockerdata挂载到 /data/db mongo 表示自动拉取的镜像 --auth 表示开启授权 docker exec -it mongo3 mongo admin 解释： 终端进入容器 mongo3 并且执行容器中的命令 mongo admin 然后创建一个user administrator: db.createUser({ user:&quot;zihua&quot;, pwd:&quot;Asd123321&quot;, roles:[{role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;} ]} ); db.createUser( { user: &quot;yahaa&quot;, pwd: &quot;Asd123321&quot;, roles: [ { role: &quot;readWrite&quot;, db: &quot;chatapi&quot; }, { role: &quot;readWrite&quot;, db: &quot;chatapi-log&quot; } ] } ) 详情参考下面博文docker 中mongodb 授权 参考博客 本地连接到阿里云mongodb//连接MongoDB并指定端口 mongo 192.168.1.100:27017 //连接到指定的MongoDB数据库 mongo 192.168.1.100:27017/test //指定用户名和密码连接到指定的MongoDB数据库 mongo 192.168.1.200:27017/test -u user -p password","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://foryung.com/tags/docker/"}],"keywords":[]},{"title":"mongodb使用总结","slug":"mongodb使用总结","date":"2017-06-25T16:37:08.000Z","updated":"2018-01-05T10:37:54.000Z","comments":true,"path":"2017/06/26/mongodb使用总结/","link":"","permalink":"http://foryung.com/2017/06/26/mongodb使用总结/","excerpt":"","text":"Mongodb修改为密码登录 无密码登录到mongodb mongo 使用 admin这个数据库 use admin 新建用户 db.createUser( { user: &quot;userName&quot;, pwd: &quot;password&quot;, roles: [ { role: &quot;userAdmin&quot;, db: &quot;admin&quot; } ] } ) 停止 mongodb sudo service mongod stop 启动验证登录 sudo mongod --auth 重启 sudo service mongod start 密码登录到 mongodb mongo --port 27017 -u &quot;userName&quot; -p &quot;password&quot; --authenticationDatabase &quot;admin&quot; 说明 userName,password 为你想要添加的用户名以及密码，并且指定了数据库 admin ,拥有权限: userAdmin 数据库用户角色：read、readWrite; 数据库管理角色：dbAdmin、dbOwner、userAdmin； 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 备份恢复角色：backup、restore； 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 超级用户角色：root// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 内部角色：__system","categories":[],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://foryung.com/tags/mongodb/"}],"keywords":[]},{"title":"英语学习小工具","slug":"google浏览器插件开发入门","date":"2017-03-22T15:22:55.000Z","updated":"2018-01-05T10:36:24.000Z","comments":true,"path":"2017/03/22/google浏览器插件开发入门/","link":"","permalink":"http://foryung.com/2017/03/22/google浏览器插件开发入门/","excerpt":"","text":"英语学习小工具项目来源 平时自己在chrome使用划词翻译遇到了很多陌生的单词，但是每次都是翻译完就完了，没能及时地把自己遇到过生词记录下来。 如果能在每次使用翻译的时候把自己不会的单词默默地记录下来那么我们可以有针对性的复习自己不会的单词。 实现思路 在开源项目 划词翻译 的基础上做修改，把每次或多次翻译的单词或句子发送到配套服务器上。 服务器用负责收集单词","categories":[],"tags":[{"name":"chrome","slug":"chrome","permalink":"http://foryung.com/tags/chrome/"}],"keywords":[]},{"title":"Markdown语法入门","slug":"Markdown语法入门","date":"2017-03-18T13:57:54.000Z","updated":"2018-01-05T10:37:49.000Z","comments":true,"path":"2017/03/18/Markdown语法入门/","link":"","permalink":"http://foryung.com/2017/03/18/Markdown语法入门/","excerpt":"我久违的笔记写给自己很久前打算每天坚持写一些总结，日记用以记录自己的生活。 但是每次都被自己的懒惰给征服了，希望这次自己能坚持下去吧！","text":"我久违的笔记写给自己很久前打算每天坚持写一些总结，日记用以记录自己的生活。 但是每次都被自己的懒惰给征服了，希望这次自己能坚持下去吧！ markdown 练习一个人一个非常懒惰 的人 但是一个积极向上的人 懒惰不代表我不积极 如果有一天我再次遇见你，我绝对看都不看你一眼！ 假如世界欺骗了你，不要悲伤，不要难过，你默默的记住就是了！ 一个技术宅的世界 别人说你不行了，那不是 你真 的不行你自己说自己不行了那你就是永远的 不行 了 一个人要有目标是吧！ 目标 懒惰 废物 世界 和平 爱好 你好啊 我很好 好久不见啊 源代码 public class Singleton { public static void main(String []args){ System.out.println(&quot;Love Java&quot;); } }","categories":[],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://foryung.com/tags/Markdown/"}],"keywords":[]}]}