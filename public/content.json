{"meta":{"title":"Gofoer","subtitle":"Something new,something interesting.","description":"Something new,something interesting.","author":"zihua","url":"http://blog.foryung.com"},"pages":[{"title":"404","date":"2017-12-10T13:13:18.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"404.html","permalink":"http://blog.foryung.com/404.html","excerpt":"","text":"&lt;!DOCTYPE html&gt;"},{"title":"categories","date":"2018-04-06T15:39:52.000Z","updated":"2018-04-06T15:40:47.000Z","comments":true,"path":"categories/index.html","permalink":"http://blog.foryung.com/categories/index.html","excerpt":"","text":""},{"title":"关于我&本博客","date":"2017-08-23T15:23:59.000Z","updated":"2018-04-06T16:41:33.000Z","comments":true,"path":"about/index.html","permalink":"http://blog.foryung.com/about/index.html","excerpt":"","text":"关于我 来自上海大学计算机学院，程序员一枚。 菜鸟一枚，但热爱 docker、k8s。 代码和人一样丑，但热爱 golang，docker 脑抽粉。 会写 Python、Go、Java、略知 C++/C。 2017年9月拿到七牛校招 offer,目前在七牛实习。 关于本博客 基于 hexo 搭建的静态博客，使用 next 主题。 用 Jenkins、docker、github 持续化构建。 部署于 GCP 服务器，用阿里云服务器做反向代理。 用 Let’s Encrypt，linux cron 支持 https。 本博客记录的是本人平时学习折腾的一些东西，水平有限，还望海涵。"},{"title":"blog","date":"2017-08-23T15:29:29.000Z","updated":"2017-12-10T13:13:18.000Z","comments":true,"path":"blog/index.html","permalink":"http://blog.foryung.com/blog/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-04-06T08:57:57.000Z","updated":"2018-04-06T15:40:54.000Z","comments":true,"path":"tags/index.html","permalink":"http://blog.foryung.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"零基础入门计算机？","slug":"零基础入门计算机？","date":"2018-05-23T11:30:11.000Z","updated":"2018-05-23T11:57:47.000Z","comments":true,"path":"2018/05/23/零基础入门计算机？/","link":"","permalink":"http://blog.foryung.com/2018/05/23/零基础入门计算机？/","excerpt":"时光匆匆，感觉昨天才上大学而今天就要离开学校了。大学四年，有的人过得非常充实收获满满，有的人玩了四年的游戏，等到了该找工作该毕业的日子才醒悟过来，原来自己大学白活了。","text":"时光匆匆，感觉昨天才上大学而今天就要离开学校了。大学四年，有的人过得非常充实收获满满，有的人玩了四年的游戏，等到了该找工作该毕业的日子才醒悟过来，原来自己大学白活了。 问题汇总 为什么我找个工作这么难？ 为什么计算机专业的就这么容易找工作？ 我零基础学习编程可行吗？ 自学编程可以吗？ 以上问题我这里不一一回复本文只回答 “零基础入门计算机？” 零基础入门计算机？ 我认为可以的！！！","categories":[{"name":"nginx","slug":"nginx","permalink":"http://blog.foryung.com/categories/nginx/"}],"tags":[{"name":"Go","slug":"Go","permalink":"http://blog.foryung.com/tags/Go/"}],"keywords":[{"name":"nginx","slug":"nginx","permalink":"http://blog.foryung.com/categories/nginx/"}]},{"title":"c调用第三方库","slug":"c调用第三方库","date":"2018-05-14T07:03:41.000Z","updated":"2018-05-14T07:33:22.000Z","comments":true,"path":"2018/05/14/c调用第三方库/","link":"","permalink":"http://blog.foryung.com/2018/05/14/c调用第三方库/","excerpt":"go、java等其它高级语言调用第三方库是非常简单的，但是到了c就不一样了(其实还是简单只是我不会)。","text":"go、java等其它高级语言调用第三方库是非常简单的，但是到了c就不一样了(其实还是简单只是我不会)。 c 使用 hiredis hiredis 使用 123git clone https://github.com/redis/hiredis.gitmakemake install 测试代码 main.c 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;hiredis/hiredis.h&gt;int main()&#123; redisContext *conn = redisConnect(\"127.0.0.1\", 6379); if (conn != NULL &amp;&amp; conn-&gt;err) &#123; printf(\"connection error: %s\\n\", conn-&gt;errstr); return 0; &#125; redisReply *reply; reply = redisCommand(conn, \"SET %s %s\", \"foo\", \"bar\"); freeReplyObject(reply); reply = redisCommand(conn, \"GET %s\", \"foo\"); printf(\"%s\\n\", reply-&gt;str); freeReplyObject(reply); redisFree(conn); return 0;&#125; 用 gcc 编译 1gcc -o main main.c -L/usr/local/lib -lhiredis","categories":[{"name":"c","slug":"c","permalink":"http://blog.foryung.com/categories/c/"}],"tags":[{"name":"c","slug":"c","permalink":"http://blog.foryung.com/tags/c/"}],"keywords":[{"name":"c","slug":"c","permalink":"http://blog.foryung.com/categories/c/"}]},{"title":"brew国内源","slug":"brew国内源","date":"2018-04-29T03:01:45.000Z","updated":"2018-04-29T03:17:41.000Z","comments":true,"path":"2018/04/29/brew国内源/","link":"","permalink":"http://blog.foryung.com/2018/04/29/brew国内源/","excerpt":"网上随手抄的 brew 国内源修改，","text":"网上随手抄的 brew 国内源修改， 修改 brew 源为清华大学源 1234567cd \"$(brew --repo)\"git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.gitcd \"$(brew --repo)/Library/Taps/homebrew/homebrew-core\"git remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git 修改 bash_profile 123echo 'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles' &gt;&gt; ~/.bash_profilesource ~/.bash_profile 验证 1brew update brew update 如果长时间没反应，课重启电脑看看","categories":[{"name":"network","slug":"network","permalink":"http://blog.foryung.com/categories/network/"}],"tags":[{"name":"network","slug":"network","permalink":"http://blog.foryung.com/tags/network/"}],"keywords":[{"name":"network","slug":"network","permalink":"http://blog.foryung.com/categories/network/"}]},{"title":"Docker 容器主机磁盘耗尽的问题的解决方案","slug":"Docker_log","date":"2017-12-10T13:22:05.000Z","updated":"2018-04-06T15:43:17.000Z","comments":true,"path":"2017/12/10/Docker_log/","link":"","permalink":"http://blog.foryung.com/2017/12/10/Docker_log/","excerpt":"docker 有毒，你看又把服务器磁盘快耗尽了。。。","text":"docker 有毒，你看又把服务器磁盘快耗尽了。。。 docker log 真确的使用姿势 docker log 支持的驱动请看 docker log driver。docker 默认的日志驱动是 json-file,所以上面这条命令会收集容器的终端输出保留最新的日志，保留三份，每份50M。这点和 supervisor 滚动保存日志的方式是一致的。 1docker run -d -p 27017:27017 --log-opt max-file=3 --log-opt max-size=50M mongo 自己有毒。。。","categories":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/tags/docker/"}],"keywords":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/categories/docker/"}]},{"title":"WOC go get 这么慢","slug":"关于http-https流量转socks5流量的一些笔记","date":"2017-10-28T08:12:58.000Z","updated":"2018-04-06T15:45:21.000Z","comments":true,"path":"2017/10/28/关于http-https流量转socks5流量的一些笔记/","link":"","permalink":"http://blog.foryung.com/2017/10/28/关于http-https流量转socks5流量的一些笔记/","excerpt":"好烦啊，go get 拉一个第三方依赖要这么长时间，还让不让人好好的写代码了。","text":"好烦啊，go get 拉一个第三方依赖要这么长时间，还让不让人好好的写代码了。 写在前面的话 在linux（ubuntu）上使用过ssr的同学都知道，ssr使用的是socks5协议，并且在本地默认监听的是1080端口，我们需要在浏览器中使用 SwitchyOmega 插件才能正常FQ，那么问题来了，我们平时在命令行下使用wget，go get,mvn等走的都是http/https，所以我们是无法直接使用127.0.0.1:1080做代理的。怎么办？我们需要把http/https流量转发都1080端口即可 1.Ubuntu16.04 下的解决方案 安装polipo sudo apt-get install polipo 修改配置文件 sudo vim /etc/polipo/config #修改为如下 # This file only needs to list configuration variables that deviate # from the default values. See /usr/share/doc/polipo/examples/config.sample # and &quot;polipo -v&quot; for variables you can tweak and further information. logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &quot;127.0.0.1&quot; proxyPort = 8118 socksParentProxy = &quot;127.0.0.1:1080&quot; socksProxyType = socks5 重启 polipo sudo /etc/init.d/polipo restart 测试 export http_proxy=&quot;http://127.0.0.1:8118/&quot; curl ifconfig.me //稍等片刻可以看到终端显示代理服务器ip地址 完成上面步骤那么我们就可以通过 127.0.0.1:8118把http/https流量转发到127.0.0.1:1080端口的socks5上了 2.测试是否成功 上面的记录主要是我在使用go get命令下载三方依赖的时候老是被xxxxx,那么完成了上面步骤，我就可以通过走8118端口用go get 下载到我需要的依赖了，我怎么做？看下面步骤…… 3.给 go get 命令走 socks5 修改环境变量 vim .bashrc //在后面追加下面配置 alias goo=&apos;http_proxy=127.0.0.1:8118 https_proxy=127.0.0.1:8118 go&apos; //使.bashrc生效 source .bashrc 使用 goo get &lt;xxxxxxxxxx&gt; //","categories":[{"name":"network","slug":"network","permalink":"http://blog.foryung.com/categories/network/"}],"tags":[{"name":"network","slug":"network","permalink":"http://blog.foryung.com/tags/network/"}],"keywords":[{"name":"network","slug":"network","permalink":"http://blog.foryung.com/categories/network/"}]},{"title":"fluentd 收集 docker 容器终端输出的日志","slug":"fluent 收集 docker 日志","date":"2017-09-04T02:23:32.000Z","updated":"2018-04-06T15:44:07.000Z","comments":true,"path":"2017/09/04/fluent 收集 docker 日志/","link":"","permalink":"http://blog.foryung.com/2017/09/04/fluent 收集 docker 日志/","excerpt":"fluentd 是一款强大的日志收集工具，docker log driver 也支持 fluentd,那么为什么不搞点大新闻呢？","text":"fluentd 是一款强大的日志收集工具，docker log driver 也支持 fluentd,那么为什么不搞点大新闻呢？ 1.在服务器上安装部署 fluentd (Ubuntu16.04)1.1 安装 fluentd fluentd 安装过程请看 fluentd 官网 1.2 安装 mongodb plugin1sudo td-agent-gem install fluent-plugin-mongo 1.3 修改 fluentd 配置文件 用 vim 打开 td-agent.conf 1sudo vim /etc/td-agent/td-agent.conf 修改 td-agent.conf 为下面的配置文件 1234567891011121314151617181920&lt;source&gt; type forward port 24224 bind 0.0.0.0 tag docker.access&lt;/source&gt;&lt;match **&gt; @type mongo database apache collection access host localhost port 27017 &lt;buffer&gt; flush_interval 3s &lt;/buffer&gt; &lt;inject&gt; time_key time &lt;/inject&gt;&lt;/match&gt; 1.4 重启 td-agent1sudo /etc/init.d/td-agent restart 1.5 检测 td-agent 运行状态1sudo /etc/init.d/td-agent status 有下面输出表示 td-agent 运行成功1* td-agent is running","categories":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/categories/docker/"}],"tags":[{"name":"fluent","slug":"fluent","permalink":"http://blog.foryung.com/tags/fluent/"}],"keywords":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/categories/docker/"}]},{"title":"ubuntu 上的 ufw","slug":"ufw使用笔记","date":"2017-08-26T13:13:08.000Z","updated":"2018-04-06T15:45:07.000Z","comments":true,"path":"2017/08/26/ufw使用笔记/","link":"","permalink":"http://blog.foryung.com/2017/08/26/ufw使用笔记/","excerpt":"最近在使用学校的云服务器，真心烦，各种端口限制，不过还好，在被限制的情况下逼迫自己学会使用nginx做反向代理，同时会用ufw。面是记录自己使用ufw的一些记录，防止自己忘掉。","text":"最近在使用学校的云服务器，真心烦，各种端口限制，不过还好，在被限制的情况下逼迫自己学会使用nginx做反向代理，同时会用ufw。面是记录自己使用ufw的一些记录，防止自己忘掉。 1.安装ufw sudo apt-get install ufw 2.使用 sudo ufw status //查看开放的状态 sudo ufw allow 8000 //开放8000 sudo ufw deny 8000 //关闭 8000 ufw -h //具体查看使用帮助","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.foryung.com/categories/linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.foryung.com/tags/linux/"}],"keywords":[{"name":"linux","slug":"linux","permalink":"http://blog.foryung.com/categories/linux/"}]},{"title":"Ubuntu16.04 软件源","slug":"Ubuntu软件源","date":"2017-08-24T08:06:37.000Z","updated":"2018-04-06T15:44:57.000Z","comments":true,"path":"2017/08/24/Ubuntu软件源/","link":"","permalink":"http://blog.foryung.com/2017/08/24/Ubuntu软件源/","excerpt":"之前一直用ubuntu14.04,那时安装软件基本没什么问题，但是到了ubuntu16.04各种问题都出现了，比如通过deb包安装搜狗输入法，docker等时依赖无法下载，经过一番折腾，发现是软件源不正常导致，所以想把这一折腾结构记录一下以免下次自己又得去折腾。","text":"之前一直用ubuntu14.04,那时安装软件基本没什么问题，但是到了ubuntu16.04各种问题都出现了，比如通过deb包安装搜狗输入法，docker等时依赖无法下载，经过一番折腾，发现是软件源不正常导致，所以想把这一折腾结构记录一下以免下次自己又得去折腾。 配置 sudo cp /etc/apt/source.list /etc/apt/backup_source.list 备份 vim /ete/apt/source.list 把原来的全删了，改为下面软件源 12345678910111213141516171819# deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricteddeb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial universedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates universedeb http://mirrors.aliyun.com/ubuntu/ xenial multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiversedeb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-propertiesdeb http://archive.canonical.com/ubuntu xenial partnerdeb-src http://archive.canonical.com/ubuntu xenial partnerdeb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricteddeb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-propertiesdeb http://mirrors.aliyun.com/ubuntu/ xenial-security universedeb http://mirrors.aliyun.com/ubuntu/ xenial-security multiversedeb http://cz.archive.ubuntu.com/ubuntu trusty main sudo apt update 更新一下即可","categories":[{"name":"linux","slug":"linux","permalink":"http://blog.foryung.com/categories/linux/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://blog.foryung.com/tags/Linux/"}],"keywords":[{"name":"linux","slug":"linux","permalink":"http://blog.foryung.com/categories/linux/"}]},{"title":"nginx 入门","slug":"nginx","date":"2017-08-17T07:12:44.000Z","updated":"2018-04-06T15:44:47.000Z","comments":true,"path":"2017/08/17/nginx/","link":"","permalink":"http://blog.foryung.com/2017/08/17/nginx/","excerpt":"菜鸟入门 nginx","text":"菜鸟入门 nginx nginx 使用笔记安装 (ubuntu) sudo apt-get update sudo apt-get install nginx 卸载 sudo apt-get remove nginx nginx-common # 卸载删除除了配置文件以外的所有文件。 sudo apt-get purge nginx nginx-common # 卸载所有东东，包括删除配置文件。 sudo apt-get autoremove # 在上面命令结束后执行，主要是卸载删除Nginx的不再被使用的依赖包。 sudo apt-get remove nginx-full nginx-common #卸载删除两个主要的包。 参考博文 启动 sudo /etc/init.d/nginx start 停止 ps -ef | grep nginx kill -QUIT pid kill -TERM pid pkill -9 nginx 重启 （必须实在启动情况下） nginx -s reload 检查修改后的配置文件 nginx -t -c /xxx/nginx/config/nginx.conf","categories":[{"name":"nginx","slug":"nginx","permalink":"http://blog.foryung.com/categories/nginx/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://blog.foryung.com/tags/nginx/"}],"keywords":[{"name":"nginx","slug":"nginx","permalink":"http://blog.foryung.com/categories/nginx/"}]},{"title":"docker使用笔记","slug":"docker使用笔记","date":"2017-06-29T13:06:05.000Z","updated":"2018-04-06T15:43:59.000Z","comments":true,"path":"2017/06/29/docker使用笔记/","link":"","permalink":"http://blog.foryung.com/2017/06/29/docker使用笔记/","excerpt":"docker 脑残粉","text":"docker 脑残粉 安装docker curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet | sh - 非root用户使用docker sudo usermod -aG docker userName 重启电脑 在docker中部署mongodb docker run –name mongo3 -p 27018:27017 -d -v /home/yahaa/dockerdata:/data/db mongo –auth 解释： --name mongo3 指定容器名字为 mongo3 -p 27018:27017 指定本机端口27018和容器端口27018绑定 -d 在后台中运行 -v 把本地的 /home/yahaa/dockerdata挂载到 /data/db mongo 表示自动拉取的镜像 --auth 表示开启授权 docker exec -it mongo3 mongo admin 解释： 终端进入容器 mongo3 并且执行容器中的命令 mongo admin 然后创建一个user administrator: db.createUser({ user:&quot;zihua&quot;, pwd:&quot;Asd123321&quot;, roles:[{role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;} ]} ); db.createUser( { user: &quot;yahaa&quot;, pwd: &quot;Asd123321&quot;, roles: [ { role: &quot;readWrite&quot;, db: &quot;chatapi&quot; }, { role: &quot;readWrite&quot;, db: &quot;chatapi-log&quot; } ] } ) 详情参考下面博文docker 中mongodb 授权 参考博客 本地连接到阿里云mongodb//连接MongoDB并指定端口 mongo 192.168.1.100:27017 //连接到指定的MongoDB数据库 mongo 192.168.1.100:27017/test //指定用户名和密码连接到指定的MongoDB数据库 mongo 192.168.1.200:27017/test -u user -p password","categories":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/tags/docker/"}],"keywords":[{"name":"docker","slug":"docker","permalink":"http://blog.foryung.com/categories/docker/"}]},{"title":"mongodb 鉴权","slug":"mongodb使用总结","date":"2017-06-25T16:37:08.000Z","updated":"2018-04-06T15:44:37.000Z","comments":true,"path":"2017/06/26/mongodb使用总结/","link":"","permalink":"http://blog.foryung.com/2017/06/26/mongodb使用总结/","excerpt":"mongodb 用户鉴权折腾记","text":"mongodb 用户鉴权折腾记 Mongodb修改为密码登录 无密码登录到mongodb mongo 使用 admin这个数据库 use admin 新建用户 db.createUser( { user: &quot;userName&quot;, pwd: &quot;password&quot;, roles: [ { role: &quot;userAdmin&quot;, db: &quot;admin&quot; } ] } ) 停止 mongodb sudo service mongod stop 启动验证登录 sudo mongod --auth 重启 sudo service mongod start 密码登录到 mongodb mongo --port 27017 -u &quot;userName&quot; -p &quot;password&quot; --authenticationDatabase &quot;admin&quot; 说明 userName,password 为你想要添加的用户名以及密码，并且指定了数据库 admin ,拥有权限: userAdmin 数据库用户角色：read、readWrite; 数据库管理角色：dbAdmin、dbOwner、userAdmin； 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager； 备份恢复角色：backup、restore； 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase 超级用户角色：root// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase） 内部角色：__system","categories":[{"name":"mongo","slug":"mongo","permalink":"http://blog.foryung.com/categories/mongo/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://blog.foryung.com/tags/mongodb/"}],"keywords":[{"name":"mongo","slug":"mongo","permalink":"http://blog.foryung.com/categories/mongo/"}]},{"title":"chrome 插件开发","slug":"google浏览器插件开发入门","date":"2017-03-22T15:22:55.000Z","updated":"2018-04-06T15:44:26.000Z","comments":true,"path":"2017/03/22/google浏览器插件开发入门/","link":"","permalink":"http://blog.foryung.com/2017/03/22/google浏览器插件开发入门/","excerpt":"基于划词翻译插件实现的生词本。","text":"基于划词翻译插件实现的生词本。 英语学习小工具项目来源 平时自己在chrome使用划词翻译遇到了很多陌生的单词，但是每次都是翻译完就完了，没能及时地把自己遇到过生词记录下来。 如果能在每次使用翻译的时候把自己不会的单词默默地记录下来那么我们可以有针对性的复习自己不会的单词。 实现思路 在开源项目 划词翻译 的基础上做修改，把每次或多次翻译的单词或句子发送到配套服务器上。 服务器用负责收集单词","categories":[{"name":"乱搞","slug":"乱搞","permalink":"http://blog.foryung.com/categories/乱搞/"}],"tags":[{"name":"chrome","slug":"chrome","permalink":"http://blog.foryung.com/tags/chrome/"}],"keywords":[{"name":"乱搞","slug":"乱搞","permalink":"http://blog.foryung.com/categories/乱搞/"}]}]}