<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[brew国内源]]></title>
      <url>/2018/04/29/brew%E5%9B%BD%E5%86%85%E6%BA%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>网上随手抄的 brew 国内源修改，</p>
</blockquote>
<p><img src="http://p1lpgmbe0.bkt.clouddn.com/homebrew.png" alt="brew"></p>
<ul>
<li>修改 brew 源为清华大学源</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>
<ul>
<li>修改 bash_profile</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<ul>
<li>验证</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure>
<blockquote>
<p>brew update 如果长时间没反应，课重启电脑看看</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Docker 容器主机磁盘耗尽的问题的解决方案]]></title>
      <url>/2017/12/10/Docker_log/</url>
      <content type="html"><![CDATA[<blockquote>
<p>docker 有毒，你看又把服务器磁盘快耗尽了。。。<br><img src="http://p1teq0wgy.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202018-04-06%20%E4%B8%8B%E5%8D%889.18.02.png" alt="iterm"></p>
</blockquote>
<a id="more"></a>
<h4 id="docker-log-真确的使用姿势"><a href="#docker-log-真确的使用姿势" class="headerlink" title="docker log 真确的使用姿势"></a>docker log 真确的使用姿势</h4><blockquote>
<p>docker log 支持的驱动请看 <a href="https://docs.docker.com/config/containers/logging/configure/#supported-logging-drivers" target="_blank" rel="noopener">docker log driver</a>。<br>docker 默认的日志驱动是 json-file,所以上面这条命令会收集容器的终端输出保留最新的日志，保留三份，每份50M。这点和 supervisor 滚动保存日志的方式是一致的。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 27017:27017 --<span class="built_in">log</span>-opt max-file=3 --<span class="built_in">log</span>-opt max-size=50M mongo</span><br></pre></td></tr></table></figure>
<blockquote>
<p>自己有毒。。。<br><img src="http://p1teq0wgy.bkt.clouddn.com/docker.jpg?imageMogr2/thumbnail/!50p" alt="docker"></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[WOC go get 这么慢]]></title>
      <url>/2017/10/28/%E5%85%B3%E4%BA%8Ehttp-https%E6%B5%81%E9%87%8F%E8%BD%ACsocks5%E6%B5%81%E9%87%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>好烦啊，go get 拉一个第三方依赖要这么长时间，还让不让人好好的写代码了。</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/1_v8aqa9ANpmb0CmWUXw7AkQ.png" alt="slowly"></p>
<a id="more"></a>
<h3 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h3><blockquote>
<p>在linux（ubuntu）上使用过ssr的同学都知道，ssr使用的是socks5协议，并且在本地默认监听的是1080端口，我们需要在浏览器中使用 SwitchyOmega 插件才能正常FQ，那么问题来了，我们平时在命令行下使用wget，go get,mvn等走的都是http/https，所以我们是无法直接使用127.0.0.1:1080做代理的。怎么办？我们需要把http/https流量转发都1080端口即可</p>
</blockquote>
<h4 id="1-Ubuntu16-04-下的解决方案"><a href="#1-Ubuntu16-04-下的解决方案" class="headerlink" title="1.Ubuntu16.04 下的解决方案"></a>1.Ubuntu16.04 下的解决方案</h4><ul>
<li><p>安装polipo</p>
<pre><code>sudo apt-get install polipo
</code></pre></li>
<li><p>修改配置文件</p>
<pre><code>sudo vim /etc/polipo/config   #修改为如下

# This file only needs to list configuration variables that deviate
# from the default values.  See /usr/share/doc/polipo/examples/config.sample
# and &quot;polipo -v&quot; for variables you can tweak and further information.

logSyslog = true
logFile = /var/log/polipo/polipo.log
proxyAddress = &quot;127.0.0.1&quot;
proxyPort = 8118

socksParentProxy = &quot;127.0.0.1:1080&quot;
socksProxyType = socks5
</code></pre></li>
<li><p>重启 polipo</p>
<pre><code>sudo /etc/init.d/polipo restart
</code></pre></li>
<li><p>测试</p>
<pre><code>export http_proxy=&quot;http://127.0.0.1:8118/&quot;
curl ifconfig.me

//稍等片刻可以看到终端显示代理服务器ip地址
</code></pre></li>
</ul>
<blockquote>
<p>完成上面步骤那么我们就可以通过 127.0.0.1:8118把http/https流量转发到127.0.0.1:1080端口的socks5上了</p>
</blockquote>
<h4 id="2-测试是否成功"><a href="#2-测试是否成功" class="headerlink" title="2.测试是否成功"></a>2.测试是否成功</h4><blockquote>
<p>上面的记录主要是我在使用go get命令下载三方依赖的时候老是被xxxxx,那么完成了上面步骤，我就可以通过走8118端口用go get 下载到我需要的依赖了，我怎么做？看下面步骤……</p>
</blockquote>
<h4 id="3-给-go-get-命令走-socks5"><a href="#3-给-go-get-命令走-socks5" class="headerlink" title="3.给 go get 命令走 socks5"></a>3.给 go get 命令走 socks5</h4><ul>
<li><p>修改环境变量</p>
<pre><code>vim .bashrc
//在后面追加下面配置
alias  goo=&apos;http_proxy=127.0.0.1:8118 https_proxy=127.0.0.1:8118 go&apos;

//使.bashrc生效
source .bashrc
</code></pre></li>
<li><p>使用</p>
<pre><code>goo get &lt;xxxxxxxxxx&gt;      //
</code></pre></li>
</ul>
]]></content>
      
        <categories>
            
            <category> network </category>
            
        </categories>
        
        
        <tags>
            
            <tag> network </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fluentd 收集 docker 容器终端输出的日志]]></title>
      <url>/2017/09/04/fluent%20%E6%94%B6%E9%9B%86%20docker%20%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<blockquote>
<p>fluentd 是一款强大的日志收集工具，docker log driver 也支持 fluentd,那么为什么不搞点大新闻呢？</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/fluentd.gif" alt="fluentd"></p>
<a id="more"></a>
<h3 id="1-在服务器上安装部署-fluentd-Ubuntu16-04"><a href="#1-在服务器上安装部署-fluentd-Ubuntu16-04" class="headerlink" title="1.在服务器上安装部署 fluentd (Ubuntu16.04)"></a>1.在服务器上安装部署 fluentd (Ubuntu16.04)</h3><h4 id="1-1-安装-fluentd"><a href="#1-1-安装-fluentd" class="headerlink" title="1.1 安装 fluentd"></a>1.1 安装 fluentd</h4><blockquote>
<p>fluentd 安装过程请看 <a href="https://docs.fluentd.org/v0.12/articles/install-by-deb" target="_blank" rel="noopener">fluentd 官网</a></p>
</blockquote>
<h4 id="1-2-安装-mongodb-plugin"><a href="#1-2-安装-mongodb-plugin" class="headerlink" title="1.2 安装 mongodb plugin"></a>1.2 安装 mongodb plugin</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo td-agent-gem install fluent-plugin-mongo</span><br></pre></td></tr></table></figure>
<h4 id="1-3-修改-fluentd-配置文件"><a href="#1-3-修改-fluentd-配置文件" class="headerlink" title="1.3 修改 fluentd 配置文件"></a>1.3 修改 fluentd 配置文件</h4><blockquote>
<p>用 vim 打开 td-agent.conf</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim  /etc/td-agent/td-agent.conf</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改 td-agent.conf 为下面的配置文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">	type forward</span><br><span class="line">	port 24224</span><br><span class="line">	bind 0.0.0.0</span><br><span class="line">	tag docker.access</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match **&gt;</span><br><span class="line">	@type mongo</span><br><span class="line">	database apache</span><br><span class="line">	collection access</span><br><span class="line">	host localhost</span><br><span class="line">	port 27017</span><br><span class="line">	&lt;buffer&gt;</span><br><span class="line">		flush_interval 3s</span><br><span class="line">	&lt;/buffer&gt;</span><br><span class="line">	&lt;inject&gt;</span><br><span class="line">		time_key time</span><br><span class="line">	&lt;/inject&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure>
<h4 id="1-4-重启-td-agent"><a href="#1-4-重启-td-agent" class="headerlink" title="1.4 重启 td-agent"></a>1.4 重启 td-agent</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/td-agent restart</span><br></pre></td></tr></table></figure>
<h4 id="1-5-检测-td-agent-运行状态"><a href="#1-5-检测-td-agent-运行状态" class="headerlink" title="1.5 检测 td-agent 运行状态"></a>1.5 检测 td-agent 运行状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /etc/init.d/td-agent status</span><br></pre></td></tr></table></figure>
<blockquote>
<p>有下面输出表示 td-agent 运行成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* td-agent is running</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> fluent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ubuntu 上的 ufw]]></title>
      <url>/2017/08/26/ufw%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>最近在使用学校的云服务器，真心烦，各种端口限制，不过还好，在被限制的情况下逼迫自己学会使用nginx做反向代理，同时会用ufw。<br>面是记录自己使用ufw的一些记录，防止自己忘掉。</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/ufw.png" alt="uwf"></p>
<a id="more"></a>
<h3 id="1-安装ufw"><a href="#1-安装ufw" class="headerlink" title="1.安装ufw"></a>1.安装ufw</h3><ul>
<li>sudo apt-get install ufw</li>
</ul>
<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><ul>
<li>sudo ufw status   //查看开放的状态</li>
<li>sudo ufw allow 8000      //开放8000</li>
<li>sudo ufw deny 8000      //关闭 8000</li>
<li>ufw -h       //具体查看使用帮助</li>
</ul>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu16.04 软件源]]></title>
      <url>/2017/08/24/Ubuntu%E8%BD%AF%E4%BB%B6%E6%BA%90/</url>
      <content type="html"><![CDATA[<blockquote>
<p>之前一直用ubuntu14.04,那时安装软件基本没什么问题，但是到了ubuntu16.04各种问题都出现了，比如通过deb包安装搜狗输入法，docker等时依赖无法下载，经过一番折腾，发现是软件源不正常导致，所以想把这一折腾结构记录一下以免下次自己又得去折腾。</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/ubuntu.png" alt="ubuntu"></p>
<a id="more"></a>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>sudo cp /etc/apt/source.list /etc/apt/backup_source.list 备份</li>
<li>vim /ete/apt/source.list 把原来的全删了，改为下面软件源</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]/ xenial main restricted</span></span><br><span class="line">deb-src http://archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb-src http://archive.canonical.com/ubuntu xenial partner</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span><br><span class="line">deb http://cz.archive.ubuntu.com/ubuntu trusty main</span><br></pre></td></tr></table></figure>
<ul>
<li>sudo apt update 更新一下即可</li>
</ul>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx 入门]]></title>
      <url>/2017/08/17/nginx/</url>
      <content type="html"><![CDATA[<blockquote>
<p>菜鸟入门 nginx</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/nginx.gif" alt="nginx"></p>
<a id="more"></a>
<h3 id="nginx-使用笔记"><a href="#nginx-使用笔记" class="headerlink" title="nginx 使用笔记"></a>nginx 使用笔记</h3><h4 id="安装-ubuntu"><a href="#安装-ubuntu" class="headerlink" title="安装 (ubuntu)"></a>安装 (ubuntu)</h4><ul>
<li>sudo apt-get update</li>
<li>sudo apt-get install nginx</li>
</ul>
<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><ul>
<li>sudo apt-get remove nginx nginx-common # 卸载删除除了配置文件以外的所有文件。</li>
<li>sudo apt-get purge nginx nginx-common # 卸载所有东东，包括删除配置文件。</li>
<li>sudo apt-get autoremove # 在上面命令结束后执行，主要是卸载删除Nginx的不再被使用的依赖包。</li>
<li>sudo apt-get remove nginx-full nginx-common #卸载删除两个主要的包。</li>
<li><a href="http://blog.csdn.net/yypsober/article/details/51792363" target="_blank" rel="noopener">参考博文</a></li>
</ul>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><ul>
<li>sudo /etc/init.d/nginx start</li>
</ul>
<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><ul>
<li>ps -ef | grep nginx</li>
<li>kill -QUIT pid</li>
<li>kill -TERM pid</li>
<li>pkill -9 nginx</li>
</ul>
<h4 id="重启-（必须实在启动情况下）"><a href="#重启-（必须实在启动情况下）" class="headerlink" title="重启 （必须实在启动情况下）"></a>重启 （必须实在启动情况下）</h4><ul>
<li>nginx -s reload</li>
</ul>
<h4 id="检查修改后的配置文件"><a href="#检查修改后的配置文件" class="headerlink" title="检查修改后的配置文件"></a>检查修改后的配置文件</h4><ul>
<li>nginx -t -c /xxx/nginx/config/nginx.conf</li>
</ul>
]]></content>
      
        <categories>
            
            <category> nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[docker使用笔记]]></title>
      <url>/2017/06/29/docker%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>docker 脑残粉</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/docker.jpg" alt="docker"></p>
<a id="more"></a>
<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><ol>
<li>curl -sSL <a href="http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet" target="_blank" rel="noopener">http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/intranet</a> | sh -</li>
<li>非root用户使用docker sudo usermod -aG docker userName</li>
<li>重启电脑</li>
</ol>
<h3 id="在docker中部署mongodb"><a href="#在docker中部署mongodb" class="headerlink" title="在docker中部署mongodb"></a>在docker中部署mongodb</h3><ul>
<li>docker run –name mongo3 -p 27018:27017 -d -v /home/yahaa/dockerdata:/data/db mongo –auth</li>
</ul>
<pre><code>解释：
    --name mongo3 指定容器名字为　mongo3
    -p 27018:27017 指定本机端口27018和容器端口27018绑定
    -d 在后台中运行
    -v 把本地的　/home/yahaa/dockerdata挂载到　/data/db
    mongo 表示自动拉取的镜像
    --auth 表示开启授权
</code></pre><ul>
<li>docker exec -it mongo3 mongo admin</li>
</ul>
<pre><code>解释：
    终端进入容器　mongo3 并且执行容器中的命令　mongo admin
</code></pre><ul>
<li>然后创建一个user administrator:</li>
</ul>
<pre><code>db.createUser({
    user:&quot;zihua&quot;,
    pwd:&quot;Asd123321&quot;,
    roles:[{role:&quot;userAdminAnyDatabase&quot;,db:&quot;admin&quot;}
    ]}
);


db.createUser(
  {
    user: &quot;yahaa&quot;,
    pwd: &quot;Asd123321&quot;,
    roles: [ { role: &quot;readWrite&quot;, db: &quot;chatapi&quot; },
             { role: &quot;readWrite&quot;, db: &quot;chatapi-log&quot; } ]
  }
)
</code></pre><ul>
<li>详情参考下面博文<h4 id="docker-中mongodb-授权"><a href="#docker-中mongodb-授权" class="headerlink" title="docker 中mongodb 授权"></a>docker 中mongodb 授权</h4></li>
<li><a href="https://blog.igevin.info/posts/docker-mongo-auth/" target="_blank" rel="noopener">参考博客</a></li>
</ul>
<h3 id="本地连接到阿里云mongodb"><a href="#本地连接到阿里云mongodb" class="headerlink" title="本地连接到阿里云mongodb"></a>本地连接到阿里云mongodb</h3><pre><code>//连接MongoDB并指定端口

mongo 192.168.1.100:27017

//连接到指定的MongoDB数据库

mongo 192.168.1.100:27017/test

//指定用户名和密码连接到指定的MongoDB数据库

mongo 192.168.1.200:27017/test -u user -p password
</code></pre>]]></content>
      
        <categories>
            
            <category> docker </category>
            
        </categories>
        
        
        <tags>
            
            <tag> docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mongodb 鉴权]]></title>
      <url>/2017/06/26/mongodb%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<blockquote>
<p>mongodb 用户鉴权折腾记</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/mongo.jpg" alt="mongo"></p>
<a id="more"></a>
<h3 id="Mongodb修改为密码登录"><a href="#Mongodb修改为密码登录" class="headerlink" title="Mongodb修改为密码登录"></a>Mongodb修改为密码登录</h3><ul>
<li>无密码登录到mongodb</li>
</ul>
<pre><code>mongo
</code></pre><ul>
<li>使用 admin这个数据库</li>
</ul>
<pre><code>use admin
</code></pre><ul>
<li><p>新建用户</p>
<pre><code>db.createUser(
   {
     user: &quot;userName&quot;,
     pwd: &quot;password&quot;,
     roles: [ { role: &quot;userAdmin&quot;, db: &quot;admin&quot; } ]
   }
)
</code></pre></li>
<li><p>停止 mongodb</p>
</li>
</ul>
<pre><code>sudo service mongod stop
</code></pre><ul>
<li>启动验证登录</li>
</ul>
<pre><code>sudo mongod --auth
</code></pre><ul>
<li>重启　</li>
</ul>
<pre><code>sudo service mongod start
</code></pre><ul>
<li>密码登录到 mongodb</li>
</ul>
<pre><code>mongo --port 27017 -u &quot;userName&quot; -p &quot;password&quot; --authenticationDatabase &quot;admin&quot;
</code></pre><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ol>
<li><p>userName,password 为你想要添加的用户名以及密码，并且指定了数据库 admin ,拥有权限: userAdmin</p>
</li>
<li><p>数据库用户角色：read、readWrite;  </p>
</li>
<li>数据库管理角色：dbAdmin、dbOwner、userAdmin；       </li>
<li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</li>
<li>备份恢复角色：backup、restore；</li>
<li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li>
<li>超级用户角色：root<br>// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</li>
<li>内部角色：__system</li>
</ol>
]]></content>
      
        <categories>
            
            <category> mongo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[chrome 插件开发]]></title>
      <url>/2017/03/22/google%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>基于划词翻译插件实现的生词本。</p>
</blockquote>
<p><img src="http://p1teq0wgy.bkt.clouddn.com/chrome.jpg" alt="chrome"><br><a id="more"></a></p>
<h1 id="英语学习小工具"><a href="#英语学习小工具" class="headerlink" title="英语学习小工具"></a>英语学习小工具</h1><h3 id="项目来源"><a href="#项目来源" class="headerlink" title="项目来源"></a>项目来源</h3><ul>
<li>平时自己在chrome使用划词翻译遇到了很多陌生的单词，但是每次都是翻译完就完了，没能及时地把自己遇到过生词记录下来。</li>
<li>如果能在每次使用翻译的时候把自己不会的单词默默地记录下来那么我们可以有针对性的复习自己不会的单词。</li>
</ul>
<h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul>
<li>在开源项目 <strong>划词翻译</strong> 的基础上做修改，把每次或多次翻译的单词或句子发送到配套服务器上。</li>
<li>服务器用负责收集单词</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 乱搞 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
